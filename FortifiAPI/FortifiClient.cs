//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace FortifiAPI
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://api.fortifi.io/v1";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Current Version</summary>
        /// <returns>Version</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetVersionAsync()
        {
            return GetVersionAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Current Version</summary>
        /// <returns>Version</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response> GetVersionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/version");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Verify service account / Get Access Token</summary>
        /// <returns>Token</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response2> GetServiceAuthTokenAsync(ServiceAccountCredentialsPayload payload)
        {
            return GetServiceAuthTokenAsync(payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Verify service account / Get Access Token</summary>
        /// <returns>Token</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response2> GetServiceAuthTokenAsync(ServiceAccountCredentialsPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/svcauth/verify");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response2); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Current User</summary>
        /// <returns>User Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response3> GetMeAsync()
        {
            return GetMeAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Current User</summary>
        /// <returns>User Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response3> GetMeAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/me");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response3); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response3>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Current Organisation</summary>
        /// <returns>Organisation Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response4> GetOrganisationAsync()
        {
            return GetOrganisationAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Current Organisation</summary>
        /// <returns>Organisation Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response4> GetOrganisationAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organisation");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response4); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response4>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Your Brand</summary>
        /// <returns>Brand Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response5> GetBrandsAsync()
        {
            return GetBrandsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Your Brand</summary>
        /// <returns>Brand Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response5> GetBrandsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/brands");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response5); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response5>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response5);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new advertiser</summary>
        /// <returns>Advertiser Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response6> AdvertisersAsync(CreateAdvertiserPayload payload)
        {
            return AdvertisersAsync(payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a new advertiser</summary>
        /// <returns>Advertiser Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response6> AdvertisersAsync(CreateAdvertiserPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/advertisers");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response6); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response6>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid data supplied\n", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response6);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List advertisers</summary>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>List of advertisers</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response7> Advertisers2Async(int? limit, int? page)
        {
            return Advertisers2Async(limit, page, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List advertisers</summary>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>List of advertisers</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response7> Advertisers2Async(int? limit, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/advertisers?");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null) urlBuilder_.Append("page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response7); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response7>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response7);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve an advertiser</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <returns>Loaded Advertiser</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response8> Advertisers3Async(string advertiserFid)
        {
            return Advertisers3Async(advertiserFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve an advertiser</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <returns>Loaded Advertiser</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response8> Advertisers3Async(string advertiserFid, System.Threading.CancellationToken cancellationToken)
        {
            if (advertiserFid == null)
                throw new System.ArgumentNullException("advertiserFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/advertisers/{advertiserFid}");
            urlBuilder_.Replace("{advertiserFid}", System.Uri.EscapeDataString(ConvertToString(advertiserFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response8); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response8>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Advertiser not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response8);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set approved status on an advertiser</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <returns>Approved Advertiser</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ApprovedAsync(string advertiserFid)
        {
            return ApprovedAsync(advertiserFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Set approved status on an advertiser</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <returns>Approved Advertiser</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ApprovedAsync(string advertiserFid, System.Threading.CancellationToken cancellationToken)
        {
            if (advertiserFid == null)
                throw new System.ArgumentNullException("advertiserFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/advertisers/{advertiserFid}/approved");
            urlBuilder_.Replace("{advertiserFid}", System.Uri.EscapeDataString(ConvertToString(advertiserFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Advertiser not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove approved status on an advertiser</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <returns>Advertiser no longer approved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Approved2Async(string advertiserFid)
        {
            return Approved2Async(advertiserFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove approved status on an advertiser</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <returns>Advertiser no longer approved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Approved2Async(string advertiserFid, System.Threading.CancellationToken cancellationToken)
        {
            if (advertiserFid == null)
                throw new System.ArgumentNullException("advertiserFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/advertisers/{advertiserFid}/approved");
            urlBuilder_.Replace("{advertiserFid}", System.Uri.EscapeDataString(ConvertToString(advertiserFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Advertiser not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new advertiser campaign</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <returns>Campaign Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response9> CampaignsAsync(string advertiserFid, CreateAdvertiserCampaignPayload payload)
        {
            return CampaignsAsync(advertiserFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a new advertiser campaign</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <returns>Campaign Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response9> CampaignsAsync(string advertiserFid, CreateAdvertiserCampaignPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (advertiserFid == null)
                throw new System.ArgumentNullException("advertiserFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/advertisers/{advertiserFid}/campaigns");
            urlBuilder_.Replace("{advertiserFid}", System.Uri.EscapeDataString(ConvertToString(advertiserFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response9); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response9>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid data supplied", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response9);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve an advertiser campaign</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <param name="advertiserCampaignFid">Advertiser Campaign FID to use</param>
        /// <returns>Loaded Campaign</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response10> Campaigns2Async(string advertiserFid, string advertiserCampaignFid)
        {
            return Campaigns2Async(advertiserFid, advertiserCampaignFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve an advertiser campaign</summary>
        /// <param name="advertiserFid">Advertiser FID to use</param>
        /// <param name="advertiserCampaignFid">Advertiser Campaign FID to use</param>
        /// <returns>Loaded Campaign</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response10> Campaigns2Async(string advertiserFid, string advertiserCampaignFid, System.Threading.CancellationToken cancellationToken)
        {
            if (advertiserFid == null)
                throw new System.ArgumentNullException("advertiserFid");
    
            if (advertiserCampaignFid == null)
                throw new System.ArgumentNullException("advertiserCampaignFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/advertisers/{advertiserFid}/campaigns/{advertiserCampaignFid}");
            urlBuilder_.Replace("{advertiserFid}", System.Uri.EscapeDataString(ConvertToString(advertiserFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{advertiserCampaignFid}", System.Uri.EscapeDataString(ConvertToString(advertiserCampaignFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response10); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response10>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Campaign not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response10);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve pending pixels for this visitor</summary>
        /// <param name="visitorId">'Visitor ID from the cookie.
        /// If providing a pre-linked external reference, should be set to 'byref'.
        /// If no visitor ID is known, client IP should be provided and visitorId should be set to 'unknown''</param>
        /// <returns>Pixels</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response11> PixelsAsync(string visitorId)
        {
            return PixelsAsync(visitorId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve pending pixels for this visitor</summary>
        /// <param name="visitorId">'Visitor ID from the cookie.
        /// If providing a pre-linked external reference, should be set to 'byref'.
        /// If no visitor ID is known, client IP should be provided and visitorId should be set to 'unknown''</param>
        /// <returns>Pixels</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response11> PixelsAsync(string visitorId, System.Threading.CancellationToken cancellationToken)
        {
            if (visitorId == null)
                throw new System.ArgumentNullException("visitorId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/visitors/{visitorId}/pixels");
            urlBuilder_.Replace("{visitorId}", System.Uri.EscapeDataString(ConvertToString(visitorId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response11); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response11>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response11);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Track an action</summary>
        /// <param name="visitorId">'Visitor ID from the cookie.
        /// If providing a pre-linked external reference, should be set to 'byref'.
        /// If no visitor ID is known, client IP should be provided and visitorId should be set to 'unknown''</param>
        /// <param name="actionKey">Action key of the action to track e.g. lead</param>
        /// <returns>Action Tracked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response12> ActionsAsync(string visitorId, string actionKey, PostActionPayload payload)
        {
            return ActionsAsync(visitorId, actionKey, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Track an action</summary>
        /// <param name="visitorId">'Visitor ID from the cookie.
        /// If providing a pre-linked external reference, should be set to 'byref'.
        /// If no visitor ID is known, client IP should be provided and visitorId should be set to 'unknown''</param>
        /// <param name="actionKey">Action key of the action to track e.g. lead</param>
        /// <returns>Action Tracked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response12> ActionsAsync(string visitorId, string actionKey, PostActionPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (visitorId == null)
                throw new System.ArgumentNullException("visitorId");
    
            if (actionKey == null)
                throw new System.ArgumentNullException("actionKey");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/visitors/{visitorId}/actions/{actionKey}");
            urlBuilder_.Replace("{visitorId}", System.Uri.EscapeDataString(ConvertToString(visitorId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{actionKey}", System.Uri.EscapeDataString(ConvertToString(actionKey, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response12); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response12>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-409") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The transaction ID specified has already been used for this action\n", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not enough information was provided to complete your request\ne.g. Missing Visitor ID and/or Client IP\n", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The actionKey specified does not exist\n", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response12);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Reverse a previously tracked action</summary>
        /// <param name="visitorId">'Visitor ID from the cookie.
        /// If providing a pre-linked external reference, should be set to 'byref'.
        /// If no visitor ID is known, client IP should be provided and visitorId should be set to 'unknown''</param>
        /// <param name="actionKey">Action key of the action to reverse e.g. lead</param>
        /// <returns>Action Reversed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response13> ReverseAsync(string visitorId, string actionKey, ReverseActionPayload payload)
        {
            return ReverseAsync(visitorId, actionKey, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Reverse a previously tracked action</summary>
        /// <param name="visitorId">'Visitor ID from the cookie.
        /// If providing a pre-linked external reference, should be set to 'byref'.
        /// If no visitor ID is known, client IP should be provided and visitorId should be set to 'unknown''</param>
        /// <param name="actionKey">Action key of the action to reverse e.g. lead</param>
        /// <returns>Action Reversed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response13> ReverseAsync(string visitorId, string actionKey, ReverseActionPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (visitorId == null)
                throw new System.ArgumentNullException("visitorId");
    
            if (actionKey == null)
                throw new System.ArgumentNullException("actionKey");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/visitors/{visitorId}/actions/{actionKey}/reverse");
            urlBuilder_.Replace("{visitorId}", System.Uri.EscapeDataString(ConvertToString(visitorId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{actionKey}", System.Uri.EscapeDataString(ConvertToString(actionKey, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response13); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response13>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The action you are trying to reverse cannot be found\n", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-409") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The action specified has already been reversed\n", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response13);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the public key needed to encrypt a credit card number</summary>
        /// <param name="format">Format for the generated key xml, raw, pkcs1 or pkcs8.</param>
        /// <returns>RSA Public Key</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response14> PublicKeyAsync(string format)
        {
            return PublicKeyAsync(format, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get the public key needed to encrypt a credit card number</summary>
        /// <param name="format">Format for the generated key xml, raw, pkcs1 or pkcs8.</param>
        /// <returns>RSA Public Key</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response14> PublicKeyAsync(string format, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pay/publicKey?");
            if (format != null) urlBuilder_.Append("format=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response14); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response14>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response14);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a new checkout ID</summary>
        /// <param name="orderFID">FID of the order for which to retrieve a checkout ID</param>
        /// <returns>Coinbase checkout ID</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response15> CoinbaseAsync(string orderFID)
        {
            return CoinbaseAsync(orderFID, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a new checkout ID</summary>
        /// <param name="orderFID">FID of the order for which to retrieve a checkout ID</param>
        /// <returns>Coinbase checkout ID</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response15> CoinbaseAsync(string orderFID, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pay/coinbase?");
            if (orderFID != null) urlBuilder_.Append("orderFID=").Append(System.Uri.EscapeDataString(ConvertToString(orderFID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response15); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response15>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response15);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new customer</summary>
        /// <returns>Customer Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response16> CustomersAsync(CreateCustomerPayload payload)
        {
            return CustomersAsync(payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a new customer</summary>
        /// <returns>Customer Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response16> CustomersAsync(CreateCustomerPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response16); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response16>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The brand Fid you are trying to add a customer to does not exist\n", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-409") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The external reference has already been used to create a customer\n", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response16);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Find a customer by your reference</summary>
        /// <param name="reference">Your reference for the customer</param>
        /// <returns>Located Customer</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response17> FindByReferenceAsync(string reference)
        {
            return FindByReferenceAsync(reference, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Find a customer by your reference</summary>
        /// <param name="reference">Your reference for the customer</param>
        /// <returns>Located Customer</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response17> FindByReferenceAsync(string reference, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/findByReference?");
            if (reference != null) urlBuilder_.Append("reference=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response17); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response17>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response17);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Loaded Customer</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response18> Customers2Async(string customerFid)
        {
            return Customers2Async(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Loaded Customer</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response18> Customers2Async(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response18); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response18>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response18);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Customers3Async(string customerFid, string firstName, string lastName)
        {
            return Customers3Async(customerFid, firstName, lastName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Customers3Async(string customerFid, string firstName, string lastName, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (firstName != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture)), "firstName");
                    if (lastName != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture)), "lastName");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Archive a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Archived</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Customers4Async(string customerFid)
        {
            return Customers4Async(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Archive a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Archived</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Customers4Async(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("It is not possible to archive this customer", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a customers status</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Status Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AccountStatusAsync(string customerFid, SetAccountStatusPayload payload)
        {
            return AccountStatusAsync(customerFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a customers status</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Status Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task AccountStatusAsync(string customerFid, SetAccountStatusPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/accountStatus");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Save a note against a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="note">Text content of note</param>
        /// <param name="colour">Colour of the new ticket</param>
        /// <returns>Customer note saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task NoteAsync(string customerFid, string note, Colour? colour)
        {
            return NoteAsync(customerFid, note, colour, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Save a note against a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="note">Text content of note</param>
        /// <param name="colour">Colour of the new ticket</param>
        /// <returns>Customer note saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task NoteAsync(string customerFid, string note, Colour? colour, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/note");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (note == null)
                        throw new System.ArgumentNullException("note");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(note, System.Globalization.CultureInfo.InvariantCulture)), "note");
                    if (colour != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(colour, System.Globalization.CultureInfo.InvariantCulture)), "colour");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Payload", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a customers location</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Status Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task LocationAsync(string customerFid, SetCustomerLocationPayload payload)
        {
            return LocationAsync(customerFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a customers location</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Status Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task LocationAsync(string customerFid, SetCustomerLocationPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/location");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a customers status</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Status Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AccountTypeAsync(string customerFid, SetAccountTypePayload payload)
        {
            return AccountTypeAsync(customerFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a customers status</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Status Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task AccountTypeAsync(string customerFid, SetAccountTypePayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/accountType");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a customers status</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Status Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SubscriptionTypeAsync(string customerFid, SetSubscriptionTypePayload payload)
        {
            return SubscriptionTypeAsync(customerFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a customers status</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Status Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task SubscriptionTypeAsync(string customerFid, SetSubscriptionTypePayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptionType");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Mark customer as qualified, this action cannot be undone.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="isoTime">Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</param>
        /// <returns>Customer Marked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task QualifiedAsync(string customerFid, System.DateTime? isoTime)
        {
            return QualifiedAsync(customerFid, isoTime, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Mark customer as qualified, this action cannot be undone.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="isoTime">Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</param>
        /// <returns>Customer Marked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task QualifiedAsync(string customerFid, System.DateTime? isoTime, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/qualified");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (isoTime != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isoTime, System.Globalization.CultureInfo.InvariantCulture)), "isoTime");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Mark customer as charged back, this action cannot be undone.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="isoTime">Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</param>
        /// <returns>Customer Marked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ChargebackAsync(string customerFid, System.DateTime? isoTime)
        {
            return ChargebackAsync(customerFid, isoTime, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Mark customer as charged back, this action cannot be undone.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="isoTime">Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</param>
        /// <returns>Customer Marked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ChargebackAsync(string customerFid, System.DateTime? isoTime, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/chargeback");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (isoTime != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isoTime, System.Globalization.CultureInfo.InvariantCulture)), "isoTime");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Mark customer as fraudulent, this action cannot be undone.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="isoTime">Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</param>
        /// <returns>Customer Marked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task FraudAsync(string customerFid, System.DateTime? isoTime)
        {
            return FraudAsync(customerFid, isoTime, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Mark customer as fraudulent, this action cannot be undone.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="isoTime">Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</param>
        /// <returns>Customer Marked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task FraudAsync(string customerFid, System.DateTime? isoTime, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/fraud");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (isoTime != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isoTime, System.Globalization.CultureInfo.InvariantCulture)), "isoTime");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Mark customer as purchased, this action cannot be undone.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="isoTime">Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</param>
        /// <returns>Customer Marked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PurchasedAsync(string customerFid, System.DateTime? isoTime)
        {
            return PurchasedAsync(customerFid, isoTime, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Mark customer as purchased, this action cannot be undone.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="isoTime">Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</param>
        /// <returns>Customer Marked</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PurchasedAsync(string customerFid, System.DateTime? isoTime, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/purchased");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (isoTime != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isoTime, System.Globalization.CultureInfo.InvariantCulture)), "isoTime");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set customer loyalty flag</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Loyalty Acknowledged</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task LoyalAsync(string customerFid)
        {
            return LoyalAsync(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Set customer loyalty flag</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Loyalty Acknowledged</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task LoyalAsync(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/loyal");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove customer loyalty flag</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer No Longer Loyal</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Loyal2Async(string customerFid)
        {
            return Loyal2Async(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove customer loyalty flag</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer No Longer Loyal</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Loyal2Async(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/loyal");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set customer as VIP</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Now VIP</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task VipAsync(string customerFid)
        {
            return VipAsync(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Set customer as VIP</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer Now VIP</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task VipAsync(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/vip");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove customer VIP Status</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer No Longer VIP</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Vip2Async(string customerFid)
        {
            return Vip2Async(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove customer VIP Status</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Customer No Longer VIP</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Vip2Async(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/vip");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set customer Currency</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="currency">Currency (ISO 4217, 3 Character Code)</param>
        /// <returns>Customer Currency Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CurrencyAsync(string customerFid, string currency)
        {
            return CurrencyAsync(customerFid, currency, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Set customer Currency</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="currency">Currency (ISO 4217, 3 Character Code)</param>
        /// <returns>Customer Currency Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CurrencyAsync(string customerFid, string currency, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/currency");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (currency == null)
                        throw new System.ArgumentNullException("currency");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture)), "currency");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve chat sessions for customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>Chat sessions</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response19> ChatSessionsAsync(string customerFid, int? limit, int? page)
        {
            return ChatSessionsAsync(customerFid, limit, page, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve chat sessions for customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>Chat sessions</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response19> ChatSessionsAsync(string customerFid, int? limit, int? page, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/chatSessions?");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null) urlBuilder_.Append("page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response19); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response19>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response19);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve a payment</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="paymentFid">Payment FID to use</param>
        /// <returns>Loaded Payment</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response20> PaymentsAsync(string customerFid, string paymentFid)
        {
            return PaymentsAsync(customerFid, paymentFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve a payment</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="paymentFid">Payment FID to use</param>
        /// <returns>Loaded Payment</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response20> PaymentsAsync(string customerFid, string paymentFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (paymentFid == null)
                throw new System.ArgumentNullException("paymentFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/payments/{paymentFid}");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{paymentFid}", System.Uri.EscapeDataString(ConvertToString(paymentFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response20); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response20>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer or payment not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response20);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Link visitor to customer record</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="visitorId">Visitors Id</param>
        /// <returns>Visitor ID linked to customer</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task LinkVisitorAsync(string customerFid, string visitorId)
        {
            return LinkVisitorAsync(customerFid, visitorId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Link visitor to customer record</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="visitorId">Visitors Id</param>
        /// <returns>Visitor ID linked to customer</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task LinkVisitorAsync(string customerFid, string visitorId, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/linkVisitor");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (visitorId == null)
                        throw new System.ArgumentNullException("visitorId");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(visitorId, System.Globalization.CultureInfo.InvariantCulture)), "visitorId");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer or visitor not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Initiate a chargeback on a payment</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="paymentFid">Payment FID to use</param>
        /// <param name="dateSubmitted">Date the chargeback was received (Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z)</param>
        /// <param name="reasonCode">Chargeback Reason Code (see https://github.com/packaged/rwd/blob/master/src/Finance/Chargeback/ChargebackReasonHelper.php)</param>
        /// <param name="caseNumber">Case Number</param>
        /// <param name="amount">Disputed Amount</param>
        /// <param name="state">Current State</param>
        /// <param name="source">Source of the alert, or gateway for everything else</param>
        /// <param name="refunded">If this payment has been refunded by the alert</param>
        /// <param name="description">Notes</param>
        /// <param name="feeCurrency">3 Character Currency code for the fee</param>
        /// <param name="feeAmount">Fee Amount</param>
        /// <returns>Chargeback Opened</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response21> Chargeback2Async(string customerFid, string paymentFid, System.DateTime dateSubmitted, string reasonCode, string caseNumber, double amount, State state, Source source, bool refunded, string description, string feeCurrency, double? feeAmount)
        {
            return Chargeback2Async(customerFid, paymentFid, dateSubmitted, reasonCode, caseNumber, amount, state, source, refunded, description, feeCurrency, feeAmount, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Initiate a chargeback on a payment</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="paymentFid">Payment FID to use</param>
        /// <param name="dateSubmitted">Date the chargeback was received (Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z)</param>
        /// <param name="reasonCode">Chargeback Reason Code (see https://github.com/packaged/rwd/blob/master/src/Finance/Chargeback/ChargebackReasonHelper.php)</param>
        /// <param name="caseNumber">Case Number</param>
        /// <param name="amount">Disputed Amount</param>
        /// <param name="state">Current State</param>
        /// <param name="source">Source of the alert, or gateway for everything else</param>
        /// <param name="refunded">If this payment has been refunded by the alert</param>
        /// <param name="description">Notes</param>
        /// <param name="feeCurrency">3 Character Currency code for the fee</param>
        /// <param name="feeAmount">Fee Amount</param>
        /// <returns>Chargeback Opened</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response21> Chargeback2Async(string customerFid, string paymentFid, System.DateTime dateSubmitted, string reasonCode, string caseNumber, double amount, State state, Source source, bool refunded, string description, string feeCurrency, double? feeAmount, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (paymentFid == null)
                throw new System.ArgumentNullException("paymentFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/payments/{paymentFid}/chargeback");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{paymentFid}", System.Uri.EscapeDataString(ConvertToString(paymentFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (dateSubmitted == null)
                        throw new System.ArgumentNullException("dateSubmitted");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(dateSubmitted, System.Globalization.CultureInfo.InvariantCulture)), "dateSubmitted");
                    if (reasonCode == null)
                        throw new System.ArgumentNullException("reasonCode");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(reasonCode, System.Globalization.CultureInfo.InvariantCulture)), "reasonCode");
                    if (caseNumber == null)
                        throw new System.ArgumentNullException("caseNumber");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(caseNumber, System.Globalization.CultureInfo.InvariantCulture)), "caseNumber");
                    if (amount == null)
                        throw new System.ArgumentNullException("amount");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture)), "amount");
                    if (state == null)
                        throw new System.ArgumentNullException("state");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture)), "state");
                    if (source == null)
                        throw new System.ArgumentNullException("source");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(source, System.Globalization.CultureInfo.InvariantCulture)), "source");
                    if (refunded == null)
                        throw new System.ArgumentNullException("refunded");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refunded, System.Globalization.CultureInfo.InvariantCulture)), "refunded");
                    if (description != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    if (feeCurrency != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(feeCurrency, System.Globalization.CultureInfo.InvariantCulture)), "feeCurrency");
                    if (feeAmount != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(feeAmount, System.Globalization.CultureInfo.InvariantCulture)), "feeAmount");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response21); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response21>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Payload", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Payment Fid", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response21);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Action a chargeback</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="chargebackFid">Chargeback FID to use</param>
        /// <param name="reasonCode">Chargeback Reason Code (see https://github.com/packaged/rwd/blob/master/src/Finance/Chargeback/ChargebackReasonHelper.php)</param>
        /// <param name="caseNumber">Case Number</param>
        /// <param name="state">Current State</param>
        /// <param name="refunded">If this payment has been refunded by the alert</param>
        /// <param name="description">Notes</param>
        /// <returns>Chargeback Actioned</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response22> ChargebacksAsync(string customerFid, string chargebackFid, string reasonCode, string caseNumber, State state, bool refunded, string description)
        {
            return ChargebacksAsync(customerFid, chargebackFid, reasonCode, caseNumber, state, refunded, description, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Action a chargeback</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="chargebackFid">Chargeback FID to use</param>
        /// <param name="reasonCode">Chargeback Reason Code (see https://github.com/packaged/rwd/blob/master/src/Finance/Chargeback/ChargebackReasonHelper.php)</param>
        /// <param name="caseNumber">Case Number</param>
        /// <param name="state">Current State</param>
        /// <param name="refunded">If this payment has been refunded by the alert</param>
        /// <param name="description">Notes</param>
        /// <returns>Chargeback Actioned</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response22> ChargebacksAsync(string customerFid, string chargebackFid, string reasonCode, string caseNumber, State state, bool refunded, string description, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (chargebackFid == null)
                throw new System.ArgumentNullException("chargebackFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/chargebacks/{chargebackFid}");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{chargebackFid}", System.Uri.EscapeDataString(ConvertToString(chargebackFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (reasonCode == null)
                        throw new System.ArgumentNullException("reasonCode");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(reasonCode, System.Globalization.CultureInfo.InvariantCulture)), "reasonCode");
                    if (caseNumber == null)
                        throw new System.ArgumentNullException("caseNumber");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(caseNumber, System.Globalization.CultureInfo.InvariantCulture)), "caseNumber");
                    if (state == null)
                        throw new System.ArgumentNullException("state");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture)), "state");
                    if (refunded == null)
                        throw new System.ArgumentNullException("refunded");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refunded, System.Globalization.CultureInfo.InvariantCulture)), "refunded");
                    if (description != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response22); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response22>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Payload", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response22);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new support ticket</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subject">Subject of the support ticket</param>
        /// <param name="content">Content of the support ticket</param>
        /// <param name="recipient">Receiver email address e.g. support@yourdomain.com</param>
        /// <param name="sender">Sender email address e.g. user@customer.com</param>
        /// <param name="departmentFid">Department FID</param>
        /// <returns>Customer Currency Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task TicketsAsync(string customerFid, string subject, string content, string recipient, string sender, string departmentFid)
        {
            return TicketsAsync(customerFid, subject, content, recipient, sender, departmentFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a new support ticket</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subject">Subject of the support ticket</param>
        /// <param name="content">Content of the support ticket</param>
        /// <param name="recipient">Receiver email address e.g. support@yourdomain.com</param>
        /// <param name="sender">Sender email address e.g. user@customer.com</param>
        /// <param name="departmentFid">Department FID</param>
        /// <returns>Customer Currency Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task TicketsAsync(string customerFid, string subject, string content, string recipient, string sender, string departmentFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/tickets");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (subject == null)
                        throw new System.ArgumentNullException("subject");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture)), "subject");
                    if (content == null)
                        throw new System.ArgumentNullException("content");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(content, System.Globalization.CultureInfo.InvariantCulture)), "content");
                    if (recipient == null)
                        throw new System.ArgumentNullException("recipient");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(recipient, System.Globalization.CultureInfo.InvariantCulture)), "recipient");
                    if (sender == null)
                        throw new System.ArgumentNullException("sender");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sender, System.Globalization.CultureInfo.InvariantCulture)), "sender");
                    if (departmentFid != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(departmentFid, System.Globalization.CultureInfo.InvariantCulture)), "departmentFid");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get support tickets for customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Ticket collection</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response23> Tickets2Async(string customerFid)
        {
            return Tickets2Async(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get support tickets for customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Ticket collection</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response23> Tickets2Async(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/tickets");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response23); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response23>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response23);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove a config section, or property from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="sectionName">Section Name</param>
        /// <returns>Config Item Deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ConfigAsync(string entityFid, string sectionName, string itemName)
        {
            return ConfigAsync(entityFid, sectionName, itemName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove a config section, or property from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="sectionName">Section Name</param>
        /// <returns>Config Item Deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ConfigAsync(string entityFid, string sectionName, string itemName, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (sectionName == null)
                throw new System.ArgumentNullException("sectionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/config/{sectionName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sectionName}", System.Uri.EscapeDataString(ConvertToString(sectionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (itemName != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(itemName, System.Globalization.CultureInfo.InvariantCulture)), "itemName");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve a config section</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="sectionName">Section Name</param>
        /// <returns>List Of Config Items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response24> Config2Async(string entityFid, string sectionName)
        {
            return Config2Async(entityFid, sectionName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve a config section</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="sectionName">Section Name</param>
        /// <returns>List Of Config Items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response24> Config2Async(string entityFid, string sectionName, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (sectionName == null)
                throw new System.ArgumentNullException("sectionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/config/{sectionName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sectionName}", System.Uri.EscapeDataString(ConvertToString(sectionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response24); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response24>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response24);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Write a config item</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="sectionName">Section Name</param>
        /// <returns>Config Item Saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Config3Async(string entityFid, string sectionName, string itemName, string value)
        {
            return Config3Async(entityFid, sectionName, itemName, value, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Write a config item</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="sectionName">Section Name</param>
        /// <returns>Config Item Saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Config3Async(string entityFid, string sectionName, string itemName, string value, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (sectionName == null)
                throw new System.ArgumentNullException("sectionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/config/{sectionName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sectionName}", System.Uri.EscapeDataString(ConvertToString(sectionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (itemName == null)
                        throw new System.ArgumentNullException("itemName");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(itemName, System.Globalization.CultureInfo.InvariantCulture)), "itemName");
                    if (value == null)
                        throw new System.ArgumentNullException("value");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(value, System.Globalization.CultureInfo.InvariantCulture)), "value");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Entity", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve a config item</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="sectionName">Section Name</param>
        /// <param name="itemName">Item Name</param>
        /// <returns>Config Item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response25> ItemsAsync(string entityFid, string sectionName, string itemName)
        {
            return ItemsAsync(entityFid, sectionName, itemName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve a config item</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="sectionName">Section Name</param>
        /// <param name="itemName">Item Name</param>
        /// <returns>Config Item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response25> ItemsAsync(string entityFid, string sectionName, string itemName, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (sectionName == null)
                throw new System.ArgumentNullException("sectionName");
    
            if (itemName == null)
                throw new System.ArgumentNullException("itemName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/config/{sectionName}/items/{itemName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sectionName}", System.Uri.EscapeDataString(ConvertToString(sectionName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{itemName}", System.Uri.EscapeDataString(ConvertToString(itemName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response25); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response25>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response25);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Write multiple entity properties</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <returns>Properties Saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PropertiesAsync(string entityFid, PropertyBulkSetPayload payload)
        {
            return PropertiesAsync(entityFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Write multiple entity properties</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <returns>Properties Saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PropertiesAsync(string entityFid, PropertyBulkSetPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/properties");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Entity", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a property value from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Value</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response26> ValuesAsync(string entityFid, string propertyName)
        {
            return ValuesAsync(entityFid, propertyName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a property value from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Value</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response26> ValuesAsync(string entityFid, string propertyName, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (propertyName == null)
                throw new System.ArgumentNullException("propertyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/properties/values/{propertyName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyName}", System.Uri.EscapeDataString(ConvertToString(propertyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response26); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response26>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response26);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove a value property from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Values2Async(string entityFid, string propertyName, PropertyValuePayload payload)
        {
            return Values2Async(entityFid, propertyName, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove a value property from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Values2Async(string entityFid, string propertyName, PropertyValuePayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (propertyName == null)
                throw new System.ArgumentNullException("propertyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/properties/values/{propertyName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyName}", System.Uri.EscapeDataString(ConvertToString(propertyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Write an entity value property</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Values3Async(string entityFid, string propertyName, PropertyValuePayload payload)
        {
            return Values3Async(entityFid, propertyName, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Write an entity value property</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Values3Async(string entityFid, string propertyName, PropertyValuePayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (propertyName == null)
                throw new System.ArgumentNullException("propertyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/properties/values/{propertyName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyName}", System.Uri.EscapeDataString(ConvertToString(propertyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Entity", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove a flag from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task FlagsAsync(string entityFid, string propertyName)
        {
            return FlagsAsync(entityFid, propertyName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove a flag from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task FlagsAsync(string entityFid, string propertyName, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (propertyName == null)
                throw new System.ArgumentNullException("propertyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/properties/flags/{propertyName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyName}", System.Uri.EscapeDataString(ConvertToString(propertyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Write an entity flag</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Flag Saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Flags2Async(string entityFid, string propertyName, PropertyFlagPayload payload)
        {
            return Flags2Async(entityFid, propertyName, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Write an entity flag</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Flag Saved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Flags2Async(string entityFid, string propertyName, PropertyFlagPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (propertyName == null)
                throw new System.ArgumentNullException("propertyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/properties/flags/{propertyName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyName}", System.Uri.EscapeDataString(ConvertToString(propertyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Entity", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove a counter from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CountersAsync(string entityFid, string propertyName)
        {
            return CountersAsync(entityFid, propertyName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove a counter from an entity</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Property Deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CountersAsync(string entityFid, string propertyName, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (propertyName == null)
                throw new System.ArgumentNullException("propertyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/properties/counters/{propertyName}");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyName}", System.Uri.EscapeDataString(ConvertToString(propertyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Increment an entity counter</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Counter Incremented</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task IncrementAsync(string entityFid, string propertyName, PropertyCounterPayload payload)
        {
            return IncrementAsync(entityFid, propertyName, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Increment an entity counter</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Counter Incremented</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task IncrementAsync(string entityFid, string propertyName, PropertyCounterPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (propertyName == null)
                throw new System.ArgumentNullException("propertyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/properties/counters/{propertyName}/increment");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyName}", System.Uri.EscapeDataString(ConvertToString(propertyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Entity", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Decrement an entity counter</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Counter Decremented</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DecrementAsync(string entityFid, string propertyName, PropertyCounterPayload payload)
        {
            return DecrementAsync(entityFid, propertyName, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Decrement an entity counter</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <param name="propertyName">Property Name</param>
        /// <returns>Counter Decremented</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DecrementAsync(string entityFid, string propertyName, PropertyCounterPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            if (propertyName == null)
                throw new System.ArgumentNullException("propertyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/properties/counters/{propertyName}/decrement");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{propertyName}", System.Uri.EscapeDataString(ConvertToString(propertyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid Entity", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Trigger a new event</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <returns>Event Triggered</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task EventsAsync(string entityFid, TriggerActionPayload payload)
        {
            return EventsAsync(entityFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Trigger a new event</summary>
        /// <param name="entityFid">Entity FID to use</param>
        /// <returns>Event Triggered</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task EventsAsync(string entityFid, TriggerActionPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (entityFid == null)
                throw new System.ArgumentNullException("entityFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/entities/{entityFid}/events");
            urlBuilder_.Replace("{entityFid}", System.Uri.EscapeDataString(ConvertToString(entityFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List customers payment accounts</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>List of payment accounts</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response27> PaymentAccountsAsync(string customerFid)
        {
            return PaymentAccountsAsync(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List customers payment accounts</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>List of payment accounts</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response27> PaymentAccountsAsync(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/paymentAccounts");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response27); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response27>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Error retrieving payment accounts", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response27);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Initialise a new paypal agreement for existing subscriptions</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="paymentServiceFid">Payment Service FID to use</param>
        /// <param name="subscriptionFids">Subscription FIDs</param>
        /// <returns>Redirect instructions</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response28> InitialiseAsync(string customerFid, string paymentServiceFid, System.Collections.Generic.IEnumerable<string> subscriptionFids, string successUrl, string cancelUrl, string failUrl)
        {
            return InitialiseAsync(customerFid, paymentServiceFid, subscriptionFids, successUrl, cancelUrl, failUrl, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Initialise a new paypal agreement for existing subscriptions</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="paymentServiceFid">Payment Service FID to use</param>
        /// <param name="subscriptionFids">Subscription FIDs</param>
        /// <returns>Redirect instructions</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response28> InitialiseAsync(string customerFid, string paymentServiceFid, System.Collections.Generic.IEnumerable<string> subscriptionFids, string successUrl, string cancelUrl, string failUrl, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/paymentMethods/paypal/initialise");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (paymentServiceFid == null)
                        throw new System.ArgumentNullException("paymentServiceFid");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(paymentServiceFid, System.Globalization.CultureInfo.InvariantCulture)), "paymentServiceFid");
                    if (subscriptionFids == null)
                        throw new System.ArgumentNullException("subscriptionFids");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subscriptionFids, System.Globalization.CultureInfo.InvariantCulture)), "subscriptionFids");
                    if (successUrl == null)
                        throw new System.ArgumentNullException("successUrl");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(successUrl, System.Globalization.CultureInfo.InvariantCulture)), "successUrl");
                    if (cancelUrl == null)
                        throw new System.ArgumentNullException("cancelUrl");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cancelUrl, System.Globalization.CultureInfo.InvariantCulture)), "cancelUrl");
                    if (failUrl == null)
                        throw new System.ArgumentNullException("failUrl");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(failUrl, System.Globalization.CultureInfo.InvariantCulture)), "failUrl");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response28); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response28>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-501") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Inable to initialise Paypal agreement", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response28);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Complete a paypal agreement created with initialise</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="paymentServiceFid">Payment Service FID to use</param>
        /// <param name="subscriptionFids">Subscription FIDs</param>
        /// <returns>Successfully created agreement</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CompleteAsync(string customerFid, string paymentServiceFid, System.Collections.Generic.IEnumerable<string> subscriptionFids, string token)
        {
            return CompleteAsync(customerFid, paymentServiceFid, subscriptionFids, token, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Complete a paypal agreement created with initialise</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="paymentServiceFid">Payment Service FID to use</param>
        /// <param name="subscriptionFids">Subscription FIDs</param>
        /// <returns>Successfully created agreement</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CompleteAsync(string customerFid, string paymentServiceFid, System.Collections.Generic.IEnumerable<string> subscriptionFids, string token, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/paymentMethods/paypal/complete");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (paymentServiceFid == null)
                        throw new System.ArgumentNullException("paymentServiceFid");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(paymentServiceFid, System.Globalization.CultureInfo.InvariantCulture)), "paymentServiceFid");
                    if (subscriptionFids == null)
                        throw new System.ArgumentNullException("subscriptionFids");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subscriptionFids, System.Globalization.CultureInfo.InvariantCulture)), "subscriptionFids");
                    if (token == null)
                        throw new System.ArgumentNullException("token");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture)), "token");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Failed to complete Paypal agreement", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a new card</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Credit card added to the customers account</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Fid> CardsAsync(string customerFid, CardDataPayload payload)
        {
            return CardsAsync(customerFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add a new card</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Credit card added to the customers account</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Fid> CardsAsync(string customerFid, CardDataPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/paymentMethods/cards");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Fid); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Fid>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Fid);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List customers card payment methods</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>List of cards</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PaymentCards> Cards2Async(string customerFid)
        {
            return Cards2Async(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List customers card payment methods</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>List of cards</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PaymentCards> Cards2Async(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/paymentMethods/cards");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PaymentCards); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentCards>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(PaymentCards);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Card Removed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Cards3Async(string customerFid, string cardFid)
        {
            return Cards3Async(customerFid, cardFid, System.Threading.CancellationToken.None);
        }
    
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Card Removed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Cards3Async(string customerFid, string cardFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (cardFid == null)
                throw new System.ArgumentNullException("cardFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/paymentMethods/cards/{cardFid}");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{cardFid}", System.Uri.EscapeDataString(ConvertToString(cardFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a card</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Card Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Cards4Async(string customerFid, string cardFid, CardUpdatePayload payload)
        {
            return Cards4Async(customerFid, cardFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a card</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Card Updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Cards4Async(string customerFid, string cardFid, CardUpdatePayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (cardFid == null)
                throw new System.ArgumentNullException("cardFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/paymentMethods/cards/{cardFid}");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{cardFid}", System.Uri.EscapeDataString(ConvertToString(cardFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List customers addresses</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>List of addresses</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Addresses> AddressesAsync(string customerFid)
        {
            return AddressesAsync(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List customers addresses</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>List of addresses</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Addresses> AddressesAsync(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/addresses");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Addresses); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Addresses>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Addresses);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add an email address to a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Email Added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task EmailsAsync(string customerFid, string emailAddress)
        {
            return EmailsAsync(customerFid, emailAddress, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add an email address to a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Email Added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task EmailsAsync(string customerFid, string emailAddress, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/emails");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (emailAddress == null)
                        throw new System.ArgumentNullException("emailAddress");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(emailAddress, System.Globalization.CultureInfo.InvariantCulture)), "emailAddress");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a phone number to a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Phone Number Added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PhonesAsync(string customerFid, string phoneNumber, string displayName)
        {
            return PhonesAsync(customerFid, phoneNumber, displayName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add a phone number to a customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Phone Number Added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task PhonesAsync(string customerFid, string phoneNumber, string displayName, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/phones");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (phoneNumber == null)
                        throw new System.ArgumentNullException("phoneNumber");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(phoneNumber, System.Globalization.CultureInfo.InvariantCulture)), "phoneNumber");
                    if (displayName != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(displayName, System.Globalization.CultureInfo.InvariantCulture)), "displayName");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List of invoice summaries for given customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>List of invoices summaries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Invoices> InvoicesAsync(string customerFid, int? limit, int? page)
        {
            return InvoicesAsync(customerFid, limit, page, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List of invoice summaries for given customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>List of invoices summaries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Invoices> InvoicesAsync(string customerFid, int? limit, int? page, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/invoices?");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null) urlBuilder_.Append("page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Invoices); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Invoices>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Invoices);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retreive a specific itemised invoice</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="invoiceFid">Invoice Fid to use</param>
        /// <returns>Loaded invoice</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Invoice> Invoices2Async(string customerFid, string invoiceFid)
        {
            return Invoices2Async(customerFid, invoiceFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retreive a specific itemised invoice</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="invoiceFid">Invoice Fid to use</param>
        /// <returns>Loaded invoice</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Invoice> Invoices2Async(string customerFid, string invoiceFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (invoiceFid == null)
                throw new System.ArgumentNullException("invoiceFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/invoices/{invoiceFid}");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{invoiceFid}", System.Uri.EscapeDataString(ConvertToString(invoiceFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Invoice); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Invoice>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invoice not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Invoice);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retry payment of all customer invoices which are in invoice</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Invoice set to retry payment</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RetryAsync(string customerFid)
        {
            return RetryAsync(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retry payment of all customer invoices which are in invoice</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Invoice set to retry payment</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task RetryAsync(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/invoices/retry");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer or Invoice not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retry payment of invoice</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="invoiceFid">Invoice Fid to use</param>
        /// <returns>Invoice set to retry payment</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Retry2Async(string customerFid, string invoiceFid)
        {
            return Retry2Async(customerFid, invoiceFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retry payment of invoice</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="invoiceFid">Invoice Fid to use</param>
        /// <returns>Invoice set to retry payment</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Retry2Async(string customerFid, string invoiceFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (invoiceFid == null)
                throw new System.ArgumentNullException("invoiceFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/invoices/{invoiceFid}/retry");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{invoiceFid}", System.Uri.EscapeDataString(ConvertToString(invoiceFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Customer or Invoice not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a credit note to a customers invoice</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="invoiceFid">Invoice Fid to use</param>
        /// <returns>Credit Note Added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response29> CreditNoteAsync(string customerFid, string invoiceFid, InvoiceCreditNotePayload payload)
        {
            return CreditNoteAsync(customerFid, invoiceFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add a credit note to a customers invoice</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="invoiceFid">Invoice Fid to use</param>
        /// <returns>Credit Note Added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response29> CreditNoteAsync(string customerFid, string invoiceFid, InvoiceCreditNotePayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (invoiceFid == null)
                throw new System.ArgumentNullException("invoiceFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/invoices/{invoiceFid}/creditNote");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{invoiceFid}", System.Uri.EscapeDataString(ConvertToString(invoiceFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response29); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response29>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invoice not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Issue adding credit note to invoice", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response29);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List of subscription summaries for given customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>List of subscription summaries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response30> SubscriptionsAsync(string customerFid, int? limit, int? page)
        {
            return SubscriptionsAsync(customerFid, limit, page, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List of subscription summaries for given customer</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>List of subscription summaries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response30> SubscriptionsAsync(string customerFid, int? limit, int? page, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions?");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null) urlBuilder_.Append("page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response30); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response30>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response30);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retreive a specific subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Loaded subscription</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response31> Subscriptions2Async(string customerFid, string subscriptionFid)
        {
            return Subscriptions2Async(customerFid, subscriptionFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retreive a specific subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Loaded subscription</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response31> Subscriptions2Async(string customerFid, string subscriptionFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response31); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response31>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response31);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Enable auto charge on specific subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Auto charge enabled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task EnableAutoChargeAsync(string customerFid, string subscriptionFid)
        {
            return EnableAutoChargeAsync(customerFid, subscriptionFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Enable auto charge on specific subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Auto charge enabled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task EnableAutoChargeAsync(string customerFid, string subscriptionFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/enableAutoCharge");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Disable auto charge on specific subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Auto charge disabled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DisableAutoChargeAsync(string customerFid, string subscriptionFid)
        {
            return DisableAutoChargeAsync(customerFid, subscriptionFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Disable auto charge on specific subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Auto charge disabled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DisableAutoChargeAsync(string customerFid, string subscriptionFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/disableAutoCharge");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Re-enable renewals on a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Renewals Enabled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ReEnableRenewalAsync(string customerFid, string subscriptionFid, string reason)
        {
            return ReEnableRenewalAsync(customerFid, subscriptionFid, reason, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Re-enable renewals on a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Renewals Enabled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ReEnableRenewalAsync(string customerFid, string subscriptionFid, string reason, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/reEnableRenewal");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (reason == null)
                        throw new System.ArgumentNullException("reason");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(reason, System.Globalization.CultureInfo.InvariantCulture)), "reason");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set parent subscription on a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Parent subscription set</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response32> SetParentSubscriptionAsync(string customerFid, string subscriptionFid, string parentSubscriptionFid)
        {
            return SetParentSubscriptionAsync(customerFid, subscriptionFid, parentSubscriptionFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Set parent subscription on a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Parent subscription set</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response32> SetParentSubscriptionAsync(string customerFid, string subscriptionFid, string parentSubscriptionFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/setParentSubscription");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (parentSubscriptionFid == null)
                        throw new System.ArgumentNullException("parentSubscriptionFid");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(parentSubscriptionFid, System.Globalization.CultureInfo.InvariantCulture)), "parentSubscriptionFid");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response32); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response32>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Cannot create cyclic reference", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response32);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Calculates the changes before a modification to a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Calculated result of modification</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response33> CalculateModificationAsync(string customerFid, string subscriptionFid, ModifySubscriptionPayload payload)
        {
            return CalculateModificationAsync(customerFid, subscriptionFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Calculates the changes before a modification to a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Calculated result of modification</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response33> CalculateModificationAsync(string customerFid, string subscriptionFid, ModifySubscriptionPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/calculateModification");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("multipart/form-data");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response33); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response33>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid payload data", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription or Customer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response33);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Calculates the result of a potential refund on a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Returns calculated refund amounts</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response34> CalculateRefundAsync(string customerFid, string subscriptionFid, CalculateRefundPayload payload)
        {
            return CalculateRefundAsync(customerFid, subscriptionFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Calculates the result of a potential refund on a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Returns calculated refund amounts</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response34> CalculateRefundAsync(string customerFid, string subscriptionFid, CalculateRefundPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/calculateRefund");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response34); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response34>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid payload data", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response34);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set paymentAccount for subscription. If changing a payment method from an Automatic Payment Method such as PayPal Recurring Payments, any other subscriptions paid with the same Agreement will be set to Default Payment Method and the Agreement will be cancelled</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>New payment method set</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SetPaymentAccountAsync(string customerFid, string subscriptionFid, string paymentAccountFid)
        {
            return SetPaymentAccountAsync(customerFid, subscriptionFid, paymentAccountFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Set paymentAccount for subscription. If changing a payment method from an Automatic Payment Method such as PayPal Recurring Payments, any other subscriptions paid with the same Agreement will be set to Default Payment Method and the Agreement will be cancelled</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>New payment method set</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task SetPaymentAccountAsync(string customerFid, string subscriptionFid, string paymentAccountFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/setPaymentAccount");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (paymentAccountFid != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(paymentAccountFid, System.Globalization.CultureInfo.InvariantCulture)), "paymentAccountFid");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription or PaymentAccount not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Modify an existing subscription with a new price. Returns new open order to be completed</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Created new open order</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response35> ModifyAsync(string customerFid, string subscriptionFid, ModifySubscriptionPayload payload)
        {
            return ModifyAsync(customerFid, subscriptionFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Modify an existing subscription with a new price. Returns new open order to be completed</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Created new open order</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response35> ModifyAsync(string customerFid, string subscriptionFid, ModifySubscriptionPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/modify");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response35); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response35>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid payload data", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response35);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Modify an existing subscription with a new price which will be used for the next renewal</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Subscription price updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response36> UpdateRenewalPriceAsync(string customerFid, string subscriptionFid, string priceFid)
        {
            return UpdateRenewalPriceAsync(customerFid, subscriptionFid, priceFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Modify an existing subscription with a new price which will be used for the next renewal</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Subscription price updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response36> UpdateRenewalPriceAsync(string customerFid, string subscriptionFid, string priceFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/updateRenewalPrice");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (priceFid == null)
                        throw new System.ArgumentNullException("priceFid");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(priceFid, System.Globalization.CultureInfo.InvariantCulture)), "priceFid");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response36); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response36>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid payload data", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response36);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Apply an offer to a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Offer applied</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ApplyOfferAsync(string customerFid, string subscriptionFid, string offerFid)
        {
            return ApplyOfferAsync(customerFid, subscriptionFid, offerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Apply an offer to a subscription</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Offer applied</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ApplyOfferAsync(string customerFid, string subscriptionFid, string offerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/applyOffer");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (offerFid == null)
                        throw new System.ArgumentNullException("offerFid");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(offerFid, System.Globalization.CultureInfo.InvariantCulture)), "offerFid");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Pre-renew an existing subscription with a different price. Returns new open order to be completed</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <param name="priceFid">Price FID</param>
        /// <returns>Created new open order</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response37> PreRenewAsync(string customerFid, string subscriptionFid, string priceFid)
        {
            return PreRenewAsync(customerFid, subscriptionFid, priceFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Pre-renew an existing subscription with a different price. Returns new open order to be completed</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <param name="priceFid">Price FID</param>
        /// <returns>Created new open order</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response37> PreRenewAsync(string customerFid, string subscriptionFid, string priceFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/preRenew");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (priceFid == null)
                        throw new System.ArgumentNullException("priceFid");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(priceFid, System.Globalization.CultureInfo.InvariantCulture)), "priceFid");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response37); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response37>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid payload data", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response37);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Cancel a subscripion. Returns subscription FID.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Subscription cancelled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response38> CancelAsync(string customerFid, string subscriptionFid, SubscriptionCancelPayload payload)
        {
            return CancelAsync(customerFid, subscriptionFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Cancel a subscripion. Returns subscription FID.</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <param name="subscriptionFid">Subscription FID to use</param>
        /// <returns>Subscription cancelled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response38> CancelAsync(string customerFid, string subscriptionFid, SubscriptionCancelPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            if (subscriptionFid == null)
                throw new System.ArgumentNullException("subscriptionFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/subscriptions/{subscriptionFid}/cancel");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriptionFid}", System.Uri.EscapeDataString(ConvertToString(subscriptionFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response38); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response38>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid payload data", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Subscription not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response38);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Subject Access Request</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Subject Access Request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response39> SarAsync(string customerFid)
        {
            return SarAsync(customerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Subject Access Request</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Subject Access Request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response39> SarAsync(string customerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/sar");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response39); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response39>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid payload data", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response39);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Anonymize customer data</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Anonymize Request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response40> AnonymizeAsync(string customerFid, bool? customer, bool? tickets, bool? chats, bool? orders, bool? emails, bool? phones, bool? addresses, bool? paymentAccounts)
        {
            return AnonymizeAsync(customerFid, customer, tickets, chats, orders, emails, phones, addresses, paymentAccounts, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Anonymize customer data</summary>
        /// <param name="customerFid">Customer FID to use</param>
        /// <returns>Anonymize Request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response40> AnonymizeAsync(string customerFid, bool? customer, bool? tickets, bool? chats, bool? orders, bool? emails, bool? phones, bool? addresses, bool? paymentAccounts, System.Threading.CancellationToken cancellationToken)
        {
            if (customerFid == null)
                throw new System.ArgumentNullException("customerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customerFid}/anonymize");
            urlBuilder_.Replace("{customerFid}", System.Uri.EscapeDataString(ConvertToString(customerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (customer != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(customer, System.Globalization.CultureInfo.InvariantCulture)), "customer");
                    if (tickets != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tickets, System.Globalization.CultureInfo.InvariantCulture)), "tickets");
                    if (chats != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(chats, System.Globalization.CultureInfo.InvariantCulture)), "chats");
                    if (orders != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orders, System.Globalization.CultureInfo.InvariantCulture)), "orders");
                    if (emails != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(emails, System.Globalization.CultureInfo.InvariantCulture)), "emails");
                    if (phones != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(phones, System.Globalization.CultureInfo.InvariantCulture)), "phones");
                    if (addresses != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(addresses, System.Globalization.CultureInfo.InvariantCulture)), "addresses");
                    if (paymentAccounts != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(paymentAccounts, System.Globalization.CultureInfo.InvariantCulture)), "paymentAccounts");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response40); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response40>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Invalid payload data", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response40);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List all products</summary>
        /// <returns>Products retrieved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response41> ProductsAsync()
        {
            return ProductsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>List all products</summary>
        /// <returns>Products retrieved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response41> ProductsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/products");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response41); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response41>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response41);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve Product Prices</summary>
        /// <returns>List of product prices</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response42> PricesAsync(string productFid, string currency)
        {
            return PricesAsync(productFid, currency, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve Product Prices</summary>
        /// <returns>List of product prices</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response42> PricesAsync(string productFid, string currency, System.Threading.CancellationToken cancellationToken)
        {
            if (productFid == null)
                throw new System.ArgumentNullException("productFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/products/{productFid}/prices");
            urlBuilder_.Replace("{productFid}", System.Uri.EscapeDataString(ConvertToString(productFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (currency != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture)), "currency");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response42); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response42>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Product not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response42);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a list of all product groups</summary>
        /// <returns>Products groups</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response43> GroupsAsync()
        {
            return GroupsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a list of all product groups</summary>
        /// <returns>Products groups</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response43> GroupsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/products/groups");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response43); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response43>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response43);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a list of products belonging to the group</summary>
        /// <returns>Products</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response44> Products2Async(string productGroupFid)
        {
            return Products2Async(productGroupFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a list of products belonging to the group</summary>
        /// <returns>Products</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response44> Products2Async(string productGroupFid, System.Threading.CancellationToken cancellationToken)
        {
            if (productGroupFid == null)
                throw new System.ArgumentNullException("productGroupFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/products/groups/{productGroupFid}/products");
            urlBuilder_.Replace("{productGroupFid}", System.Uri.EscapeDataString(ConvertToString(productGroupFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response44); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response44>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response44);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new order</summary>
        /// <returns>Order created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response45> OrdersAsync(CreateOrderPayload payload)
        {
            return OrdersAsync(payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a new order</summary>
        /// <returns>Order created successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response45> OrdersAsync(CreateOrderPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response45); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response45>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response45);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve an order</summary>
        /// <returns>Order retrieved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response46> Orders2Async(string orderFid)
        {
            return Orders2Async(orderFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve an order</summary>
        /// <returns>Order retrieved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response46> Orders2Async(string orderFid, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response46); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response46>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Order not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response46);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Verify an order, returning any security urls</summary>
        /// <returns>Order payment account verified</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response47> VerifyAsync(string orderFid, VerifyOrderPayload payload)
        {
            return VerifyAsync(orderFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Verify an order, returning any security urls</summary>
        /// <returns>Order payment account verified</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response47> VerifyAsync(string orderFid, VerifyOrderPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/verify");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response47); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response47>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response47);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Cancel an order</summary>
        /// <returns>Order cancelled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response48> Cancel2Async(string orderFid)
        {
            return Cancel2Async(orderFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Cancel an order</summary>
        /// <returns>Order cancelled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response48> Cancel2Async(string orderFid, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/cancel");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response48); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response48>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response48);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Confirm an order, authorize the payment</summary>
        /// <returns>Order confirmed and payment authroized</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response49> ConfirmCardAsync(string orderFid, ConfirmCardOrderPayload payload)
        {
            return ConfirmCardAsync(orderFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Confirm an order, authorize the payment</summary>
        /// <returns>Order confirmed and payment authroized</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response49> ConfirmCardAsync(string orderFid, ConfirmCardOrderPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/confirmCard");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response49); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response49>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-503") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("There are no payment gateways available to handle your request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response49);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Confirm an order, authorize the payment</summary>
        /// <returns>Order confirmed and payment authroized</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response50> ConfirmPayPalAsync(string orderFid, ConfirmPayPalOrderPayload payload)
        {
            return ConfirmPayPalAsync(orderFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Confirm an order, authorize the payment</summary>
        /// <returns>Order confirmed and payment authroized</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response50> ConfirmPayPalAsync(string orderFid, ConfirmPayPalOrderPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/confirmPayPal");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response50); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response50>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-503") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("There are no payment gateways available to handle your request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response50);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Confirm an order, await payment</summary>
        /// <returns>Order confirmed; awaiting blockchain confirmation.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response51> ConfirmCoinbaseAsync(string orderFid)
        {
            return ConfirmCoinbaseAsync(orderFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Confirm an order, await payment</summary>
        /// <returns>Order confirmed; awaiting blockchain confirmation.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response51> ConfirmCoinbaseAsync(string orderFid, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/confirmCoinbase");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response51); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response51>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-503") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("There are no payment gateways available to handle your request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response51);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Confirm an order with a new card, authorize the payment</summary>
        /// <returns>Order confirmed and payment authroized</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response52> ConfirmNewCardAsync(string orderFid, ConfirmOrderWithNewCardPayload payload)
        {
            return ConfirmNewCardAsync(orderFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Confirm an order with a new card, authorize the payment</summary>
        /// <returns>Order confirmed and payment authroized</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response52> ConfirmNewCardAsync(string orderFid, ConfirmOrderWithNewCardPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/confirmNewCard");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response52); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response52>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-503") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("There are no payment gateways available to handle your request", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response52);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve fraud scan</summary>
        /// <returns>Fraud scan result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response53> FraudScanAsync(string orderFid)
        {
            return FraudScanAsync(orderFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve fraud scan</summary>
        /// <returns>Fraud scan result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response53> FraudScanAsync(string orderFid, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/fraudScan");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response53); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response53>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Fraud scan not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response53);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve order products</summary>
        /// <returns>List of order products</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response54> Products3Async(string orderFid)
        {
            return Products3Async(orderFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve order products</summary>
        /// <returns>List of order products</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response54> Products3Async(string orderFid, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/products");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response54); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response54>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Order not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response54);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a product to an order</summary>
        /// <returns>Product added to the order successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response55> Products4Async(string orderFid, OrderProductsPayload payload)
        {
            return Products4Async(orderFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add a product to an order</summary>
        /// <returns>Product added to the order successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response55> Products4Async(string orderFid, OrderProductsPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/products");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response55); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response55>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response55);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set the products on an order</summary>
        /// <returns>Order products successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response56> Products5Async(string orderFid, OrderProductsPayload payload)
        {
            return Products5Async(orderFid, payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Set the products on an order</summary>
        /// <returns>Order products successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response56> Products5Async(string orderFid, OrderProductsPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/products");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response56); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response56>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response56);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove a product from an order</summary>
        /// <returns>Product removed from the order successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Products6Async(string orderFid, string orderProductFid)
        {
            return Products6Async(orderFid, orderProductFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove a product from an order</summary>
        /// <returns>Product removed from the order successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Products6Async(string orderFid, string orderProductFid, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            if (orderProductFid == null)
                throw new System.ArgumentNullException("orderProductFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/products/{orderProductFid}");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{orderProductFid}", System.Uri.EscapeDataString(ConvertToString(orderProductFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set the quantity of a product on an order</summary>
        /// <returns>Quantity updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task QuantityAsync(string orderFid, string orderProductFid, double quantity)
        {
            return QuantityAsync(orderFid, orderProductFid, quantity, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Set the quantity of a product on an order</summary>
        /// <returns>Quantity updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task QuantityAsync(string orderFid, string orderProductFid, double quantity, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            if (orderProductFid == null)
                throw new System.ArgumentNullException("orderProductFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/products/{orderProductFid}/quantity");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{orderProductFid}", System.Uri.EscapeDataString(ConvertToString(orderProductFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (quantity == null)
                        throw new System.ArgumentNullException("quantity");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)), "quantity");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add an offer to an order</summary>
        /// <returns>Offer added to the order successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task OffersAsync(string orderFid, string offerFid, string productFid, string orderItemFid, bool? replace)
        {
            return OffersAsync(orderFid, offerFid, productFid, orderItemFid, replace, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add an offer to an order</summary>
        /// <returns>Offer added to the order successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task OffersAsync(string orderFid, string offerFid, string productFid, string orderItemFid, bool? replace, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/offers");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (offerFid == null)
                        throw new System.ArgumentNullException("offerFid");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(offerFid, System.Globalization.CultureInfo.InvariantCulture)), "offerFid");
                    if (productFid != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productFid, System.Globalization.CultureInfo.InvariantCulture)), "productFid");
                    if (orderItemFid != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderItemFid, System.Globalization.CultureInfo.InvariantCulture)), "orderItemFid");
                    if (replace != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(replace, System.Globalization.CultureInfo.InvariantCulture)), "replace");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Order not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove an offer from an order</summary>
        /// <returns>Offer removed from the order successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Offers2Async(string orderFid, string offerFid)
        {
            return Offers2Async(orderFid, offerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Remove an offer from an order</summary>
        /// <returns>Offer removed from the order successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Offers2Async(string orderFid, string offerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (orderFid == null)
                throw new System.ArgumentNullException("orderFid");
    
            if (offerFid == null)
                throw new System.ArgumentNullException("offerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{orderFid}/offers/{offerFid}");
            urlBuilder_.Replace("{orderFid}", System.Uri.EscapeDataString(ConvertToString(orderFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{offerFid}", System.Uri.EscapeDataString(ConvertToString(offerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Order not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Unsubscribe an email based on the delivery fid</summary>
        /// <param name="deliveryFid">Delivery FID</param>
        /// <param name="userAgent">User Agent of the visitors browser 'HTTP_USER_AGENT'</param>
        /// <param name="encoding">Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'</param>
        /// <param name="language">Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'</param>
        /// <param name="clientIp">IP Address of the visitor</param>
        /// <returns>Email Address Unsubscribed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UnsubscribeAsync(string deliveryFid, string userAgent, string encoding, string language, string clientIp)
        {
            return UnsubscribeAsync(deliveryFid, userAgent, encoding, language, clientIp, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Unsubscribe an email based on the delivery fid</summary>
        /// <param name="deliveryFid">Delivery FID</param>
        /// <param name="userAgent">User Agent of the visitors browser 'HTTP_USER_AGENT'</param>
        /// <param name="encoding">Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'</param>
        /// <param name="language">Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'</param>
        /// <param name="clientIp">IP Address of the visitor</param>
        /// <returns>Email Address Unsubscribed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task UnsubscribeAsync(string deliveryFid, string userAgent, string encoding, string language, string clientIp, System.Threading.CancellationToken cancellationToken)
        {
            if (deliveryFid == null)
                throw new System.ArgumentNullException("deliveryFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/messenger/deliveries/{deliveryFid}/unsubscribe");
            urlBuilder_.Replace("{deliveryFid}", System.Uri.EscapeDataString(ConvertToString(deliveryFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (userAgent != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userAgent, System.Globalization.CultureInfo.InvariantCulture)), "userAgent");
                    if (encoding != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(encoding, System.Globalization.CultureInfo.InvariantCulture)), "encoding");
                    if (language != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture)), "language");
                    if (clientIp != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(clientIp, System.Globalization.CultureInfo.InvariantCulture)), "clientIp");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Email Address not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Subscribe an email based on the delivery fid</summary>
        /// <param name="deliveryFid">Delivery FID</param>
        /// <param name="userAgent">User Agent of the visitors browser 'HTTP_USER_AGENT'</param>
        /// <param name="encoding">Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'</param>
        /// <param name="language">Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'</param>
        /// <param name="clientIp">IP Address of the visitor</param>
        /// <param name="optInStatus">Status of customer email opt-in</param>
        /// <param name="optInData">Additional data to store against opt-in</param>
        /// <returns>Email Address Subscribed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SubscribeAsync(string deliveryFid, string userAgent, string encoding, string language, string clientIp, OptInStatus? optInStatus, System.Collections.Generic.IEnumerable<string> optInData)
        {
            return SubscribeAsync(deliveryFid, userAgent, encoding, language, clientIp, optInStatus, optInData, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Subscribe an email based on the delivery fid</summary>
        /// <param name="deliveryFid">Delivery FID</param>
        /// <param name="userAgent">User Agent of the visitors browser 'HTTP_USER_AGENT'</param>
        /// <param name="encoding">Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'</param>
        /// <param name="language">Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'</param>
        /// <param name="clientIp">IP Address of the visitor</param>
        /// <param name="optInStatus">Status of customer email opt-in</param>
        /// <param name="optInData">Additional data to store against opt-in</param>
        /// <returns>Email Address Subscribed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task SubscribeAsync(string deliveryFid, string userAgent, string encoding, string language, string clientIp, OptInStatus? optInStatus, System.Collections.Generic.IEnumerable<string> optInData, System.Threading.CancellationToken cancellationToken)
        {
            if (deliveryFid == null)
                throw new System.ArgumentNullException("deliveryFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/messenger/deliveries/{deliveryFid}/subscribe");
            urlBuilder_.Replace("{deliveryFid}", System.Uri.EscapeDataString(ConvertToString(deliveryFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (userAgent != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userAgent, System.Globalization.CultureInfo.InvariantCulture)), "userAgent");
                    if (encoding != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(encoding, System.Globalization.CultureInfo.InvariantCulture)), "encoding");
                    if (language != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture)), "language");
                    if (clientIp != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(clientIp, System.Globalization.CultureInfo.InvariantCulture)), "clientIp");
                    if (optInStatus != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(optInStatus, System.Globalization.CultureInfo.InvariantCulture)), "optInStatus");
                    if (optInData != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(optInData, System.Globalization.CultureInfo.InvariantCulture)), "optInData");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Email Address not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Confirm email address</summary>
        /// <param name="emailAddress">Email Address</param>
        /// <returns>Email Address Confirmed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ConfirmAsync(string emailAddress)
        {
            return ConfirmAsync(emailAddress, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Confirm email address</summary>
        /// <param name="emailAddress">Email Address</param>
        /// <returns>Email Address Confirmed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ConfirmAsync(string emailAddress, System.Threading.CancellationToken cancellationToken)
        {
            if (emailAddress == null)
                throw new System.ArgumentNullException("emailAddress");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contacts/emails/{emailAddress}/confirm");
            urlBuilder_.Replace("{emailAddress}", System.Uri.EscapeDataString(ConvertToString(emailAddress, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Email Address not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Unsubscribe an email address</summary>
        /// <param name="emailAddress">Email Address</param>
        /// <param name="brandFid">Brand to unsubscribe the email address from</param>
        /// <param name="groupFid">Group to unsubscribe the email address from</param>
        /// <returns>Email Address Unsubscribed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Unsubscribe2Async(string emailAddress, string brandFid, string groupFid)
        {
            return Unsubscribe2Async(emailAddress, brandFid, groupFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Unsubscribe an email address</summary>
        /// <param name="emailAddress">Email Address</param>
        /// <param name="brandFid">Brand to unsubscribe the email address from</param>
        /// <param name="groupFid">Group to unsubscribe the email address from</param>
        /// <returns>Email Address Unsubscribed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Unsubscribe2Async(string emailAddress, string brandFid, string groupFid, System.Threading.CancellationToken cancellationToken)
        {
            if (emailAddress == null)
                throw new System.ArgumentNullException("emailAddress");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contacts/emails/{emailAddress}/unsubscribe");
            urlBuilder_.Replace("{emailAddress}", System.Uri.EscapeDataString(ConvertToString(emailAddress, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (brandFid != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(brandFid, System.Globalization.CultureInfo.InvariantCulture)), "brandFid");
                    if (groupFid != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(groupFid, System.Globalization.CultureInfo.InvariantCulture)), "groupFid");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Email Address not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Subscribe an email address</summary>
        /// <param name="emailAddress">Email Address</param>
        /// <param name="brandFid">Brand to subscribe the email address from</param>
        /// <param name="groupFid">Group to unsubscribe the email address from</param>
        /// <param name="userAgent">User Agent of the visitors browser 'HTTP_USER_AGENT'</param>
        /// <param name="encoding">Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'</param>
        /// <param name="language">Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'</param>
        /// <param name="clientIp">IP Address of the visitor</param>
        /// <param name="optInStatus">Status of customer email opt-in</param>
        /// <param name="optInData">Additional data to store against opt-in</param>
        /// <returns>Email Address Subscribed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Subscribe2Async(string emailAddress, string brandFid, string groupFid, string userAgent, string encoding, string language, string clientIp, OptInStatus? optInStatus, System.Collections.Generic.IEnumerable<string> optInData)
        {
            return Subscribe2Async(emailAddress, brandFid, groupFid, userAgent, encoding, language, clientIp, optInStatus, optInData, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Subscribe an email address</summary>
        /// <param name="emailAddress">Email Address</param>
        /// <param name="brandFid">Brand to subscribe the email address from</param>
        /// <param name="groupFid">Group to unsubscribe the email address from</param>
        /// <param name="userAgent">User Agent of the visitors browser 'HTTP_USER_AGENT'</param>
        /// <param name="encoding">Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'</param>
        /// <param name="language">Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'</param>
        /// <param name="clientIp">IP Address of the visitor</param>
        /// <param name="optInStatus">Status of customer email opt-in</param>
        /// <param name="optInData">Additional data to store against opt-in</param>
        /// <returns>Email Address Subscribed</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task Subscribe2Async(string emailAddress, string brandFid, string groupFid, string userAgent, string encoding, string language, string clientIp, OptInStatus? optInStatus, System.Collections.Generic.IEnumerable<string> optInData, System.Threading.CancellationToken cancellationToken)
        {
            if (emailAddress == null)
                throw new System.ArgumentNullException("emailAddress");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contacts/emails/{emailAddress}/subscribe");
            urlBuilder_.Replace("{emailAddress}", System.Uri.EscapeDataString(ConvertToString(emailAddress, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (brandFid != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(brandFid, System.Globalization.CultureInfo.InvariantCulture)), "brandFid");
                    if (groupFid != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(groupFid, System.Globalization.CultureInfo.InvariantCulture)), "groupFid");
                    if (userAgent != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userAgent, System.Globalization.CultureInfo.InvariantCulture)), "userAgent");
                    if (encoding != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(encoding, System.Globalization.CultureInfo.InvariantCulture)), "encoding");
                    if (language != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture)), "language");
                    if (clientIp != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(clientIp, System.Globalization.CultureInfo.InvariantCulture)), "clientIp");
                    if (optInStatus != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(optInStatus, System.Globalization.CultureInfo.InvariantCulture)), "optInStatus");
                    if (optInData != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(optInData, System.Globalization.CultureInfo.InvariantCulture)), "optInData");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Email Address not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new polymer</summary>
        /// <returns>Polymer created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response57> PolymersAsync(CreatePolymerPayload payload)
        {
            return PolymersAsync(payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a new polymer</summary>
        /// <returns>Polymer created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response57> PolymersAsync(CreatePolymerPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/polymers");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response57); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response57>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Information provided is not valid", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response57);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Read a polymer</summary>
        /// <returns>Polymer Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response58> Polymers2Async(string polymerFid)
        {
            return Polymers2Async(polymerFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Read a polymer</summary>
        /// <returns>Polymer Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response58> Polymers2Async(string polymerFid, System.Threading.CancellationToken cancellationToken)
        {
            if (polymerFid == null)
                throw new System.ArgumentNullException("polymerFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/polymers/{polymerFid}");
            urlBuilder_.Replace("{polymerFid}", System.Uri.EscapeDataString(ConvertToString(polymerFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response58); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response58>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Polymer not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response58);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve all offers</summary>
        /// <returns>Available Offers</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response59> Offers3Async()
        {
            return Offers3Async(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve all offers</summary>
        /// <returns>Available Offers</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response59> Offers3Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/products/offers");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response59); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response59>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response59);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve A Licence</summary>
        /// <returns>Licence Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response60> CheckAsync(string key)
        {
            return CheckAsync(key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve A Licence</summary>
        /// <returns>Licence Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response60> CheckAsync(string key, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/licence/check?");
            if (key != null) urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response60); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response60>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Licence Not Valid", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response60);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a list of all reason groups</summary>
        /// <returns>Reason groups</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response61> Groups2Async(string reasonGroupType)
        {
            return Groups2Async(reasonGroupType, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a list of all reason groups</summary>
        /// <returns>Reason groups</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response61> Groups2Async(string reasonGroupType, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/reasons/groups?");
            if (reasonGroupType != null) urlBuilder_.Append("reasonGroupType=").Append(System.Uri.EscapeDataString(ConvertToString(reasonGroupType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response61); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response61>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response61);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get all the reasons for the reason group</summary>
        /// <returns>Reason Group retrieved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response62> Groups3Async(string reasonGroupFid)
        {
            return Groups3Async(reasonGroupFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get all the reasons for the reason group</summary>
        /// <returns>Reason Group retrieved</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response62> Groups3Async(string reasonGroupFid, System.Threading.CancellationToken cancellationToken)
        {
            if (reasonGroupFid == null)
                throw new System.ArgumentNullException("reasonGroupFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/reasons/groups/{reasonGroupFid}");
            urlBuilder_.Replace("{reasonGroupFid}", System.Uri.EscapeDataString(ConvertToString(reasonGroupFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response62); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response62>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("reasonGroupFid not found", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response62);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a support ticket</summary>
        /// <returns>Ticket Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response63> Tickets3Async(CreateTicketPayload payload)
        {
            return Tickets3Async(payload, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a support ticket</summary>
        /// <returns>Ticket Information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response63> Tickets3Async(CreateTicketPayload payload, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tickets");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response63); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response63>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response63);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve all services</summary>
        /// <returns>Service listing</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response64> ServicesAsync()
        {
            return ServicesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve all services</summary>
        /// <returns>Service listing</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response64> ServicesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/services");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response64); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response64>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response64);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve incidents for service within timeframe</summary>
        /// <param name="serviceFid">Service FID to use</param>
        /// <returns>Service incidents</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response65> IncidentsAsync(string serviceFid, System.DateTime? startDate, System.DateTime? endDate)
        {
            return IncidentsAsync(serviceFid, startDate, endDate, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve incidents for service within timeframe</summary>
        /// <param name="serviceFid">Service FID to use</param>
        /// <returns>Service incidents</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response65> IncidentsAsync(string serviceFid, System.DateTime? startDate, System.DateTime? endDate, System.Threading.CancellationToken cancellationToken)
        {
            if (serviceFid == null)
                throw new System.ArgumentNullException("serviceFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/services/{serviceFid}/incidents?");
            urlBuilder_.Replace("{serviceFid}", System.Uri.EscapeDataString(ConvertToString(serviceFid, System.Globalization.CultureInfo.InvariantCulture)));
            if (startDate != null) urlBuilder_.Append("startDate=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (endDate != null) urlBuilder_.Append("endDate=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response65); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response65>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response65);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Retrieve incident updates for incident</summary>
        /// <param name="serviceFid">Service FID to use</param>
        /// <param name="incidentFid">Incident FID to use</param>
        /// <returns>Service incidents</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response66> UpdatesAsync(string serviceFid, string incidentFid)
        {
            return UpdatesAsync(serviceFid, incidentFid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve incident updates for incident</summary>
        /// <param name="serviceFid">Service FID to use</param>
        /// <param name="incidentFid">Incident FID to use</param>
        /// <returns>Service incidents</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response66> UpdatesAsync(string serviceFid, string incidentFid, System.Threading.CancellationToken cancellationToken)
        {
            if (serviceFid == null)
                throw new System.ArgumentNullException("serviceFid");
    
            if (incidentFid == null)
                throw new System.ArgumentNullException("incidentFid");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/services/{serviceFid}/incidents/{incidentFid}/updates");
            urlBuilder_.Replace("{serviceFid}", System.Uri.EscapeDataString(ConvertToString(serviceFid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incidentFid}", System.Uri.EscapeDataString(ConvertToString(incidentFid, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response66); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response66>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response66);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Lists all the current gateways</summary>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>List of payment gateways</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response67> GatewaysAsync(int? limit, int? page)
        {
            return GatewaysAsync(limit, page, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Lists all the current gateways</summary>
        /// <param name="limit">Maximum number of records per page (default: 20)</param>
        /// <param name="page">Page number (default: 1)</param>
        /// <returns>List of payment gateways</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response67> GatewaysAsync(int? limit, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/configuration/finance/gateways?");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null) urlBuilder_.Append("page=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response67); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response67>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response67);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Verify a user</summary>
        /// <param name="verifyKey">Verify key found in ?fortifiverify=VERIFYKEY</param>
        /// <param name="remoteIp">IP of the user connecting</param>
        /// <returns>List of payment gateways</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response68> VerifyUserAsync(string verifyKey, string remoteIp)
        {
            return VerifyUserAsync(verifyKey, remoteIp, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Verify a user</summary>
        /// <param name="verifyKey">Verify key found in ?fortifiverify=VERIFYKEY</param>
        /// <param name="remoteIp">IP of the user connecting</param>
        /// <returns>List of payment gateways</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response68> VerifyUserAsync(string verifyKey, string remoteIp, System.Threading.CancellationToken cancellationToken)
        {
            if (verifyKey == null)
                throw new System.ArgumentNullException("verifyKey");
    
            if (remoteIp == null)
                throw new System.ArgumentNullException("remoteIp");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/integrations/verifyUser?");
            urlBuilder_.Append("verifyKey=").Append(System.Uri.EscapeDataString(ConvertToString(verifyKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("remoteIp=").Append(System.Uri.EscapeDataString(ConvertToString(remoteIp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response68); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response68>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "x-403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Unable to verify user", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Envelope); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Envelope>("Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
            
                        return default(Response68);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    /// <summary>Envelope Meta</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EnvelopeMeta : System.ComponentModel.INotifyPropertyChanged
    {
        private string _requestId;
        private double _code;
        private string _message;
    
        /// <summary>Request ID</summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string RequestId
        {
            get { return _requestId; }
            set 
            {
                if (_requestId != value)
                {
                    _requestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Status code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public double Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Status message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EnvelopeMeta FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvelopeMeta>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Envelope</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Envelope : System.ComponentModel.INotifyPropertyChanged
    {
        private EnvelopeMeta _meta;
        private object _data = new object();
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Always)]
        public EnvelopeMeta Meta
        {
            get { return _meta; }
            set 
            {
                if (_meta != value)
                {
                    _meta = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Envelope FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Fid : System.ComponentModel.INotifyPropertyChanged
    {
        private string _fid1;
    
        /// <summary>Object FID</summary>
        [Newtonsoft.Json.JsonProperty("fid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Fid1
        {
            get { return _fid1; }
            set 
            {
                if (_fid1 != value)
                {
                    _fid1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Fid FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fid>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Entity : Fid, System.ComponentModel.INotifyPropertyChanged
    {
        private string _displayName;
        private string _description;
    
        /// <summary>Display Name</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Entity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Entity>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BoolMessage : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;
        private bool _result;
    
        /// <summary>Status Message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Success or Not</summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Always)]
        public bool Result
        {
            get { return _result; }
            set 
            {
                if (_result != value)
                {
                    _result = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BoolMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BoolMessage>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Authentication token used to access services</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AuthToken : System.ComponentModel.INotifyPropertyChanged
    {
        private string _token;
        private double? _expiry;
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token
        {
            get { return _token; }
            set 
            {
                if (_token != value)
                {
                    _token = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expiry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Expiry
        {
            get { return _expiry; }
            set 
            {
                if (_expiry != value)
                {
                    _expiry = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AuthToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AuthToken>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PubKey : System.ComponentModel.INotifyPropertyChanged
    {
        private string _key;
    
        /// <summary>RSA Public Key</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PubKey FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PubKey>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CoinbaseCheckout : System.ComponentModel.INotifyPropertyChanged
    {
        private string _checkoutID;
    
        /// <summary>Coinbase checkout ID</summary>
        [Newtonsoft.Json.JsonProperty("checkoutID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CheckoutID
        {
            get { return _checkoutID; }
            set 
            {
                if (_checkoutID != value)
                {
                    _checkoutID = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CoinbaseCheckout FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoinbaseCheckout>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>User</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class User : Fid, System.ComponentModel.INotifyPropertyChanged
    {
        private string _username;
        private string _language;
        private string _timezone;
    
        /// <summary>Username</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Language</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timezone for this user</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone
        {
            get { return _timezone; }
            set 
            {
                if (_timezone != value)
                {
                    _timezone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Organisation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Organisation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _orgName;
        private string _orgFid;
        private string _orgDomain;
        private string _primaryColour;
        private string _logo;
    
        [Newtonsoft.Json.JsonProperty("orgName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrgName
        {
            get { return _orgName; }
            set 
            {
                if (_orgName != value)
                {
                    _orgName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orgFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrgFid
        {
            get { return _orgFid; }
            set 
            {
                if (_orgFid != value)
                {
                    _orgFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orgDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrgDomain
        {
            get { return _orgDomain; }
            set 
            {
                if (_orgDomain != value)
                {
                    _orgDomain = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("primaryColour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryColour
        {
            get { return _primaryColour; }
            set 
            {
                if (_primaryColour != value)
                {
                    _primaryColour = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo
        {
            get { return _logo; }
            set 
            {
                if (_logo != value)
                {
                    _logo = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Organisation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Organisation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Brands</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Brands : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Brand> _brands1;
    
        [Newtonsoft.Json.JsonProperty("brands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Brand> Brands1
        {
            get { return _brands1; }
            set 
            {
                if (_brands1 != value)
                {
                    _brands1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Brands FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Brands>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Brand</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Brand : System.ComponentModel.INotifyPropertyChanged
    {
        private string _brandName;
        private string _primaryDomain;
        private string _brandFid;
    
        [Newtonsoft.Json.JsonProperty("brandName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandName
        {
            get { return _brandName; }
            set 
            {
                if (_brandName != value)
                {
                    _brandName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("primaryDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryDomain
        {
            get { return _primaryDomain; }
            set 
            {
                if (_primaryDomain != value)
                {
                    _primaryDomain = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Brand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Brand>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Payment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Payment : Fid, System.ComponentModel.INotifyPropertyChanged
    {
        private string _direction;
        private string _currency;
        private double? _amount;
        private double? _fee;
        private string _feeCurrency;
        private PaymentType? _type;
        private PaymentStatus? _status;
        private string _transactionId;
        private string _statusCode;
        private string _statusMessage;
        private string _statementDescriptor;
        private string _orderFid;
        private string _invoiceFid;
        private string _fraudFid;
        private bool? _processed;
        private double? _processedDate;
        private string _subGatewayFid;
        private string _subGatewayTransactionId;
        private string _disputeFid;
    
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direction
        {
            get { return _direction; }
            set 
            {
                if (_direction != value)
                {
                    _direction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee
        {
            get { return _fee; }
            set 
            {
                if (_fee != value)
                {
                    _fee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("feeCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FeeCurrency
        {
            get { return _feeCurrency; }
            set 
            {
                if (_feeCurrency != value)
                {
                    _feeCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId
        {
            get { return _transactionId; }
            set 
            {
                if (_transactionId != value)
                {
                    _transactionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusCode
        {
            get { return _statusCode; }
            set 
            {
                if (_statusCode != value)
                {
                    _statusCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statusMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusMessage
        {
            get { return _statusMessage; }
            set 
            {
                if (_statusMessage != value)
                {
                    _statusMessage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statementDescriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementDescriptor
        {
            get { return _statementDescriptor; }
            set 
            {
                if (_statementDescriptor != value)
                {
                    _statementDescriptor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("orderFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderFid
        {
            get { return _orderFid; }
            set 
            {
                if (_orderFid != value)
                {
                    _orderFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceFid
        {
            get { return _invoiceFid; }
            set 
            {
                if (_invoiceFid != value)
                {
                    _invoiceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fraudFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FraudFid
        {
            get { return _fraudFid; }
            set 
            {
                if (_fraudFid != value)
                {
                    _fraudFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("processed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Processed
        {
            get { return _processed; }
            set 
            {
                if (_processed != value)
                {
                    _processed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProcessedDate
        {
            get { return _processedDate; }
            set 
            {
                if (_processedDate != value)
                {
                    _processedDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subGatewayFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubGatewayFid
        {
            get { return _subGatewayFid; }
            set 
            {
                if (_subGatewayFid != value)
                {
                    _subGatewayFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subGatewayTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubGatewayTransactionId
        {
            get { return _subGatewayTransactionId; }
            set 
            {
                if (_subGatewayTransactionId != value)
                {
                    _subGatewayTransactionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("disputeFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisputeFid
        {
            get { return _disputeFid; }
            set 
            {
                if (_disputeFid != value)
                {
                    _disputeFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Payment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Payment>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Customer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Customer : Fid, System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _firstName;
        private string _lastName;
        private string _email;
        private string _phone;
        private string _currency;
        private string _externalReference;
        private string _companyFid;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName
        {
            get { return _firstName; }
            set 
            {
                if (_firstName != value)
                {
                    _firstName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName
        {
            get { return _lastName; }
            set 
            {
                if (_lastName != value)
                {
                    _lastName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone
        {
            get { return _phone; }
            set 
            {
                if (_phone != value)
                {
                    _phone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("companyFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyFid
        {
            get { return _companyFid; }
            set 
            {
                if (_companyFid != value)
                {
                    _companyFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Customer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Customer>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Advertiser</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Advertiser : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _type;
        private string _contactName;
        private string _companyName;
        private string _phoneFid;
        private string _emailFid;
        private string _website;
        private string _acceptedTerms;
        private string _suspended;
        private string _accountManagerFid;
        private string _foundationFid;
        private string _companyFid;
        private string _isDisabled;
        private string _email;
        private string _phone;
        private string _payoutType;
        private bool? _approved;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactName
        {
            get { return _contactName; }
            set 
            {
                if (_contactName != value)
                {
                    _contactName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName
        {
            get { return _companyName; }
            set 
            {
                if (_companyName != value)
                {
                    _companyName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phoneFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneFid
        {
            get { return _phoneFid; }
            set 
            {
                if (_phoneFid != value)
                {
                    _phoneFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("emailFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailFid
        {
            get { return _emailFid; }
            set 
            {
                if (_emailFid != value)
                {
                    _emailFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Website
        {
            get { return _website; }
            set 
            {
                if (_website != value)
                {
                    _website = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("acceptedTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptedTerms
        {
            get { return _acceptedTerms; }
            set 
            {
                if (_acceptedTerms != value)
                {
                    _acceptedTerms = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("suspended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suspended
        {
            get { return _suspended; }
            set 
            {
                if (_suspended != value)
                {
                    _suspended = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountManagerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountManagerFid
        {
            get { return _accountManagerFid; }
            set 
            {
                if (_accountManagerFid != value)
                {
                    _accountManagerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("foundationFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FoundationFid
        {
            get { return _foundationFid; }
            set 
            {
                if (_foundationFid != value)
                {
                    _foundationFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("companyFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyFid
        {
            get { return _companyFid; }
            set 
            {
                if (_companyFid != value)
                {
                    _companyFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isDisabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsDisabled
        {
            get { return _isDisabled; }
            set 
            {
                if (_isDisabled != value)
                {
                    _isDisabled = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone
        {
            get { return _phone; }
            set 
            {
                if (_phone != value)
                {
                    _phone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("payoutType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayoutType
        {
            get { return _payoutType; }
            set 
            {
                if (_payoutType != value)
                {
                    _payoutType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("approved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Approved
        {
            get { return _approved; }
            set 
            {
                if (_approved != value)
                {
                    _approved = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Advertiser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Advertiser>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Pagination : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _limit;
        private int? _page;
        private int? _totalItems;
    
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page
        {
            get { return _page; }
            set 
            {
                if (_page != value)
                {
                    _page = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalItems
        {
            get { return _totalItems; }
            set 
            {
                if (_totalItems != value)
                {
                    _totalItems = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pagination FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pagination>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Advertisers</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Advertisers : Pagination, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Advertiser> _advertisers1;
    
        [Newtonsoft.Json.JsonProperty("advertisers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Advertiser> Advertisers1
        {
            get { return _advertisers1; }
            set 
            {
                if (_advertisers1 != value)
                {
                    _advertisers1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Advertisers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Advertisers>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Campaign</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdvertiserCampaign : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _hash;
        private string _affiliateFid;
        private string _brandFid;
    
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash
        {
            get { return _hash; }
            set 
            {
                if (_hash != value)
                {
                    _hash = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("affiliateFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffiliateFid
        {
            get { return _affiliateFid; }
            set 
            {
                if (_affiliateFid != value)
                {
                    _affiliateFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdvertiserCampaign FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdvertiserCampaign>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Pixel</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdvertiserPixel : System.ComponentModel.INotifyPropertyChanged
    {
        private string _url;
        private AdvertiserPixelMethod? _method;
        private string _content;
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdvertiserPixelMethod? Method
        {
            get { return _method; }
            set 
            {
                if (_method != value)
                {
                    _method = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set 
            {
                if (_content != value)
                {
                    _content = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AdvertiserPixel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdvertiserPixel>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Vistor Action</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VisitorPostAction : System.ComponentModel.INotifyPropertyChanged
    {
        private string _visitorId;
        private string _eventId;
        private string _sid1;
        private string _sid2;
        private string _sid3;
        private string _advertiserFid;
        private string _campaignFid;
        private double? _commission;
        private string _commissionCurrency;
        private System.Collections.ObjectModel.ObservableCollection<AdvertiserPixel> _pixels;
    
        [Newtonsoft.Json.JsonProperty("visitorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VisitorId
        {
            get { return _visitorId; }
            set 
            {
                if (_visitorId != value)
                {
                    _visitorId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sid1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sid1
        {
            get { return _sid1; }
            set 
            {
                if (_sid1 != value)
                {
                    _sid1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sid2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sid2
        {
            get { return _sid2; }
            set 
            {
                if (_sid2 != value)
                {
                    _sid2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sid3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sid3
        {
            get { return _sid3; }
            set 
            {
                if (_sid3 != value)
                {
                    _sid3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("advertiserFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdvertiserFid
        {
            get { return _advertiserFid; }
            set 
            {
                if (_advertiserFid != value)
                {
                    _advertiserFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("campaignFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CampaignFid
        {
            get { return _campaignFid; }
            set 
            {
                if (_campaignFid != value)
                {
                    _campaignFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Commission
        {
            get { return _commission; }
            set 
            {
                if (_commission != value)
                {
                    _commission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commissionCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommissionCurrency
        {
            get { return _commissionCurrency; }
            set 
            {
                if (_commissionCurrency != value)
                {
                    _commissionCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pixels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AdvertiserPixel> Pixels
        {
            get { return _pixels; }
            set 
            {
                if (_pixels != value)
                {
                    _pixels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VisitorPostAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VisitorPostAction>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Visitor Action Reversal</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VisitorReversalAction : System.ComponentModel.INotifyPropertyChanged
    {
        private string _visitorId;
        private string _eventId;
        private string _advertiserFid;
        private string _campaignFid;
        private double? _reversedCommission;
        private double? _feeCharged;
        private string _commissionCurrency;
    
        [Newtonsoft.Json.JsonProperty("visitorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VisitorId
        {
            get { return _visitorId; }
            set 
            {
                if (_visitorId != value)
                {
                    _visitorId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("advertiserFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdvertiserFid
        {
            get { return _advertiserFid; }
            set 
            {
                if (_advertiserFid != value)
                {
                    _advertiserFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("campaignFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CampaignFid
        {
            get { return _campaignFid; }
            set 
            {
                if (_campaignFid != value)
                {
                    _campaignFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reversedCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReversedCommission
        {
            get { return _reversedCommission; }
            set 
            {
                if (_reversedCommission != value)
                {
                    _reversedCommission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("feeCharged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FeeCharged
        {
            get { return _feeCharged; }
            set 
            {
                if (_feeCharged != value)
                {
                    _feeCharged = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("commissionCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommissionCurrency
        {
            get { return _commissionCurrency; }
            set 
            {
                if (_commissionCurrency != value)
                {
                    _commissionCurrency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VisitorReversalAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VisitorReversalAction>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Licence</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Licence : System.ComponentModel.INotifyPropertyChanged
    {
        private string _purchaseFid;
        private string _customerFid;
        private string _status;
        private System.DateTime? _dateCreated;
        private System.DateTime? _lastRenewDate;
        private System.DateTime? _renewDate;
        private System.DateTime? _nextRenewDate;
        private System.DateTime? _autoSuspendDate;
        private System.DateTime? _autoCancelDate;
        private System.DateTime? _startDate;
        private System.DateTime? _endDate;
        private System.DateTime? _trialStartDate;
        private System.DateTime? _trialEndDate;
        private string _cycleTerm;
        private string _cycleExact;
        private CycleTermType? _cycleType;
        private string _cycle;
    
        [Newtonsoft.Json.JsonProperty("purchaseFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseFid
        {
            get { return _purchaseFid; }
            set 
            {
                if (_purchaseFid != value)
                {
                    _purchaseFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerFid
        {
            get { return _customerFid; }
            set 
            {
                if (_customerFid != value)
                {
                    _customerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated
        {
            get { return _dateCreated; }
            set 
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("lastRenewDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastRenewDate
        {
            get { return _lastRenewDate; }
            set 
            {
                if (_lastRenewDate != value)
                {
                    _lastRenewDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("renewDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RenewDate
        {
            get { return _renewDate; }
            set 
            {
                if (_renewDate != value)
                {
                    _renewDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("nextRenewDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? NextRenewDate
        {
            get { return _nextRenewDate; }
            set 
            {
                if (_nextRenewDate != value)
                {
                    _nextRenewDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("autoSuspendDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? AutoSuspendDate
        {
            get { return _autoSuspendDate; }
            set 
            {
                if (_autoSuspendDate != value)
                {
                    _autoSuspendDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("autoCancelDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? AutoCancelDate
        {
            get { return _autoCancelDate; }
            set 
            {
                if (_autoCancelDate != value)
                {
                    _autoCancelDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndDate
        {
            get { return _endDate; }
            set 
            {
                if (_endDate != value)
                {
                    _endDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("trialStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TrialStartDate
        {
            get { return _trialStartDate; }
            set 
            {
                if (_trialStartDate != value)
                {
                    _trialStartDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("trialEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TrialEndDate
        {
            get { return _trialEndDate; }
            set 
            {
                if (_trialEndDate != value)
                {
                    _trialEndDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cycleTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CycleTerm
        {
            get { return _cycleTerm; }
            set 
            {
                if (_cycleTerm != value)
                {
                    _cycleTerm = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cycleExact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CycleExact
        {
            get { return _cycleExact; }
            set 
            {
                if (_cycleExact != value)
                {
                    _cycleExact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cycleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CycleTermType? CycleType
        {
            get { return _cycleType; }
            set 
            {
                if (_cycleType != value)
                {
                    _cycleType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Interval in ISO 8601 standard</summary>
        [Newtonsoft.Json.JsonProperty("cycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cycle
        {
            get { return _cycle; }
            set 
            {
                if (_cycle != value)
                {
                    _cycle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Licence FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Licence>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Subscriptions : Pagination, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<SubscriptionSummary> _subscriptions1;
    
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SubscriptionSummary> Subscriptions1
        {
            get { return _subscriptions1; }
            set 
            {
                if (_subscriptions1 != value)
                {
                    _subscriptions1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Subscriptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Subscriptions>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SubscriptionSummary : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTime? _lastRenewed;
        private System.DateTime? _renewalDate;
        private System.DateTime? _paidUntil;
        private string _cycle;
        private bool? _autoCharge;
        private string _productFid;
        private double? _renewalPrice;
        private string _status;
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("lastRenewed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastRenewed
        {
            get { return _lastRenewed; }
            set 
            {
                if (_lastRenewed != value)
                {
                    _lastRenewed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("renewalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RenewalDate
        {
            get { return _renewalDate; }
            set 
            {
                if (_renewalDate != value)
                {
                    _renewalDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("paidUntil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PaidUntil
        {
            get { return _paidUntil; }
            set 
            {
                if (_paidUntil != value)
                {
                    _paidUntil = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Interval in ISO 8601 standard</summary>
        [Newtonsoft.Json.JsonProperty("cycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cycle
        {
            get { return _cycle; }
            set 
            {
                if (_cycle != value)
                {
                    _cycle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("autoCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoCharge
        {
            get { return _autoCharge; }
            set 
            {
                if (_autoCharge != value)
                {
                    _autoCharge = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("productFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductFid
        {
            get { return _productFid; }
            set 
            {
                if (_productFid != value)
                {
                    _productFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("renewalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RenewalPrice
        {
            get { return _renewalPrice; }
            set 
            {
                if (_renewalPrice != value)
                {
                    _renewalPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SubscriptionSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriptionSummary>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Subscription : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private double? _amount;
        private System.DateTime? _autoCancelDate;
        private bool? _autoCharge;
        private System.DateTime? _autoSuspendDate;
        private int? _cancelDays;
        private string _cancelReason;
        private string _currency;
        private string _cycle;
        private string _priceFid;
        private string _offerFid;
        private System.DateTime? _dateCancelled;
        private System.DateTime? _dateCreated;
        private System.DateTime? _dateInactive;
        private System.DateTime? _dateModified;
        private System.DateTime? _dateStateChanged;
        private System.DateTime? _dateSuspended;
        private System.DateTime? _dateUpgraded;
        private double? _discount;
        private System.DateTime? _endDate;
        private string _invoiceFid;
        private bool? _isPaid;
        private System.DateTime? _lastRenewDate;
        private System.DateTime? _nextPaymentDate;
        private double? _nextRenewalAmount;
        private System.DateTime? _nextRenewDate;
        private int? _paidRenewals;
        private System.DateTime? _paidUntil;
        private int? _quantity;
        private int? _renewalAdvanceDays;
        private System.DateTime? _renewDate;
        private double? _setupAmount;
        private double? _setupDiscount;
        private bool? _shouldCancel;
        private bool? _shouldSuspend;
        private System.DateTime? _startDate;
        private string _status;
        private int? _suspendDays;
        private string _suspendReason;
        private double? _taxAmount;
        private double? _totalAmount;
        private int? _totalRenewals;
        private System.DateTime? _trialEndDate;
        private System.DateTime? _trialStartDate;
        private string _uniqueReference;
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("autoCancelDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? AutoCancelDate
        {
            get { return _autoCancelDate; }
            set 
            {
                if (_autoCancelDate != value)
                {
                    _autoCancelDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("autoCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoCharge
        {
            get { return _autoCharge; }
            set 
            {
                if (_autoCharge != value)
                {
                    _autoCharge = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("autoSuspendDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? AutoSuspendDate
        {
            get { return _autoSuspendDate; }
            set 
            {
                if (_autoSuspendDate != value)
                {
                    _autoSuspendDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancelDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CancelDays
        {
            get { return _cancelDays; }
            set 
            {
                if (_cancelDays != value)
                {
                    _cancelDays = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancelReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancelReason
        {
            get { return _cancelReason; }
            set 
            {
                if (_cancelReason != value)
                {
                    _cancelReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Interval in ISO 8601 standard</summary>
        [Newtonsoft.Json.JsonProperty("cycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cycle
        {
            get { return _cycle; }
            set 
            {
                if (_cycle != value)
                {
                    _cycle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PriceFid
        {
            get { return _priceFid; }
            set 
            {
                if (_priceFid != value)
                {
                    _priceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("offerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfferFid
        {
            get { return _offerFid; }
            set 
            {
                if (_offerFid != value)
                {
                    _offerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dateCancelled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCancelled
        {
            get { return _dateCancelled; }
            set 
            {
                if (_dateCancelled != value)
                {
                    _dateCancelled = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated
        {
            get { return _dateCreated; }
            set 
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dateInactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateInactive
        {
            get { return _dateInactive; }
            set 
            {
                if (_dateInactive != value)
                {
                    _dateInactive = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateModified
        {
            get { return _dateModified; }
            set 
            {
                if (_dateModified != value)
                {
                    _dateModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dateStateChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateStateChanged
        {
            get { return _dateStateChanged; }
            set 
            {
                if (_dateStateChanged != value)
                {
                    _dateStateChanged = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dateSuspended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateSuspended
        {
            get { return _dateSuspended; }
            set 
            {
                if (_dateSuspended != value)
                {
                    _dateSuspended = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dateUpgraded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateUpgraded
        {
            get { return _dateUpgraded; }
            set 
            {
                if (_dateUpgraded != value)
                {
                    _dateUpgraded = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Discount
        {
            get { return _discount; }
            set 
            {
                if (_discount != value)
                {
                    _discount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndDate
        {
            get { return _endDate; }
            set 
            {
                if (_endDate != value)
                {
                    _endDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceFid
        {
            get { return _invoiceFid; }
            set 
            {
                if (_invoiceFid != value)
                {
                    _invoiceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPaid
        {
            get { return _isPaid; }
            set 
            {
                if (_isPaid != value)
                {
                    _isPaid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("lastRenewDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastRenewDate
        {
            get { return _lastRenewDate; }
            set 
            {
                if (_lastRenewDate != value)
                {
                    _lastRenewDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? NextPaymentDate
        {
            get { return _nextPaymentDate; }
            set 
            {
                if (_nextPaymentDate != value)
                {
                    _nextPaymentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nextRenewalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NextRenewalAmount
        {
            get { return _nextRenewalAmount; }
            set 
            {
                if (_nextRenewalAmount != value)
                {
                    _nextRenewalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("nextRenewDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? NextRenewDate
        {
            get { return _nextRenewDate; }
            set 
            {
                if (_nextRenewDate != value)
                {
                    _nextRenewDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paidRenewals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PaidRenewals
        {
            get { return _paidRenewals; }
            set 
            {
                if (_paidRenewals != value)
                {
                    _paidRenewals = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("paidUntil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PaidUntil
        {
            get { return _paidUntil; }
            set 
            {
                if (_paidUntil != value)
                {
                    _paidUntil = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("renewalAdvanceDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenewalAdvanceDays
        {
            get { return _renewalAdvanceDays; }
            set 
            {
                if (_renewalAdvanceDays != value)
                {
                    _renewalAdvanceDays = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("renewDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RenewDate
        {
            get { return _renewDate; }
            set 
            {
                if (_renewDate != value)
                {
                    _renewDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupAmount
        {
            get { return _setupAmount; }
            set 
            {
                if (_setupAmount != value)
                {
                    _setupAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupDiscount
        {
            get { return _setupDiscount; }
            set 
            {
                if (_setupDiscount != value)
                {
                    _setupDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shouldCancel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShouldCancel
        {
            get { return _shouldCancel; }
            set 
            {
                if (_shouldCancel != value)
                {
                    _shouldCancel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("shouldSuspend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShouldSuspend
        {
            get { return _shouldSuspend; }
            set 
            {
                if (_shouldSuspend != value)
                {
                    _shouldSuspend = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("suspendDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SuspendDays
        {
            get { return _suspendDays; }
            set 
            {
                if (_suspendDays != value)
                {
                    _suspendDays = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("suspendReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SuspendReason
        {
            get { return _suspendReason; }
            set 
            {
                if (_suspendReason != value)
                {
                    _suspendReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAmount
        {
            get { return _taxAmount; }
            set 
            {
                if (_taxAmount != value)
                {
                    _taxAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalRenewals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalRenewals
        {
            get { return _totalRenewals; }
            set 
            {
                if (_totalRenewals != value)
                {
                    _totalRenewals = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("trialEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TrialEndDate
        {
            get { return _trialEndDate; }
            set 
            {
                if (_trialEndDate != value)
                {
                    _trialEndDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("trialStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TrialStartDate
        {
            get { return _trialStartDate; }
            set 
            {
                if (_trialStartDate != value)
                {
                    _trialStartDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("uniqueReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueReference
        {
            get { return _uniqueReference; }
            set 
            {
                if (_uniqueReference != value)
                {
                    _uniqueReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Subscription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Subscription>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Response from calculating a refund on a subscription</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CalculateSubscriptionRefund : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _amountWithTax;
        private double? _amountWithoutTax;
        private double? _tax;
        private double? _terminationFee;
        private double? _terminationFeeWithTax;
    
        [Newtonsoft.Json.JsonProperty("amountWithTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountWithTax
        {
            get { return _amountWithTax; }
            set 
            {
                if (_amountWithTax != value)
                {
                    _amountWithTax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountWithoutTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountWithoutTax
        {
            get { return _amountWithoutTax; }
            set 
            {
                if (_amountWithoutTax != value)
                {
                    _amountWithoutTax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tax
        {
            get { return _tax; }
            set 
            {
                if (_tax != value)
                {
                    _tax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("terminationFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TerminationFee
        {
            get { return _terminationFee; }
            set 
            {
                if (_terminationFee != value)
                {
                    _terminationFee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("terminationFeeWithTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TerminationFeeWithTax
        {
            get { return _terminationFeeWithTax; }
            set 
            {
                if (_terminationFeeWithTax != value)
                {
                    _terminationFeeWithTax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CalculateSubscriptionRefund FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalculateSubscriptionRefund>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Invoices : Pagination, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<InvoiceSummary> _invoices1;
    
        [Newtonsoft.Json.JsonProperty("invoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InvoiceSummary> Invoices1
        {
            get { return _invoices1; }
            set 
            {
                if (_invoices1 != value)
                {
                    _invoices1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Invoices FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Invoices>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceSummary : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private int? _invoiceNumber;
        private System.DateTime? _invoiceDate;
        private string _currency;
        private System.DateTime? _dueDate;
        private System.DateTime? _paymentDate;
        private double? _amountPaid;
        private double? _baseAmount;
        private double? _discountAmount;
        private double? _taxAmount;
        private double? _creditedAmount;
        private double? _totalAmount;
        private double? _outstandingAmount;
        private double? _refundAmount;
        private string _invoiceStatus;
    
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InvoiceNumber
        {
            get { return _invoiceNumber; }
            set 
            {
                if (_invoiceNumber != value)
                {
                    _invoiceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? InvoiceDate
        {
            get { return _invoiceDate; }
            set 
            {
                if (_invoiceDate != value)
                {
                    _invoiceDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DueDate
        {
            get { return _dueDate; }
            set 
            {
                if (_dueDate != value)
                {
                    _dueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PaymentDate
        {
            get { return _paymentDate; }
            set 
            {
                if (_paymentDate != value)
                {
                    _paymentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountPaid
        {
            get { return _amountPaid; }
            set 
            {
                if (_amountPaid != value)
                {
                    _amountPaid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("baseAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BaseAmount
        {
            get { return _baseAmount; }
            set 
            {
                if (_baseAmount != value)
                {
                    _baseAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAmount
        {
            get { return _taxAmount; }
            set 
            {
                if (_taxAmount != value)
                {
                    _taxAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditedAmount
        {
            get { return _creditedAmount; }
            set 
            {
                if (_creditedAmount != value)
                {
                    _creditedAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outstandingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OutstandingAmount
        {
            get { return _outstandingAmount; }
            set 
            {
                if (_outstandingAmount != value)
                {
                    _outstandingAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("refundAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RefundAmount
        {
            get { return _refundAmount; }
            set 
            {
                if (_refundAmount != value)
                {
                    _refundAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceStatus
        {
            get { return _invoiceStatus; }
            set 
            {
                if (_invoiceStatus != value)
                {
                    _invoiceStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvoiceSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvoiceSummary>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Invoice : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTime? _invoiceDate;
        private int? _invoiceNumber;
        private string _currency;
        private System.DateTime? _dueDate;
        private System.DateTime? _paymentDate;
        private double? _amountPaid;
        private double? _baseAmount;
        private double? _discountAmount;
        private double? _taxAmount;
        private double? _creditedAmount;
        private double? _totalAmount;
        private double? _outstandingAmount;
        private double? _refundAmount;
        private string _invoiceStatus;
        private int? _totalItems;
        private System.Collections.ObjectModel.ObservableCollection<InvoiceItem> _invoiceItems;
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? InvoiceDate
        {
            get { return _invoiceDate; }
            set 
            {
                if (_invoiceDate != value)
                {
                    _invoiceDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InvoiceNumber
        {
            get { return _invoiceNumber; }
            set 
            {
                if (_invoiceNumber != value)
                {
                    _invoiceNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DueDate
        {
            get { return _dueDate; }
            set 
            {
                if (_dueDate != value)
                {
                    _dueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PaymentDate
        {
            get { return _paymentDate; }
            set 
            {
                if (_paymentDate != value)
                {
                    _paymentDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountPaid
        {
            get { return _amountPaid; }
            set 
            {
                if (_amountPaid != value)
                {
                    _amountPaid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("baseAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BaseAmount
        {
            get { return _baseAmount; }
            set 
            {
                if (_baseAmount != value)
                {
                    _baseAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAmount
        {
            get { return _taxAmount; }
            set 
            {
                if (_taxAmount != value)
                {
                    _taxAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditedAmount
        {
            get { return _creditedAmount; }
            set 
            {
                if (_creditedAmount != value)
                {
                    _creditedAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outstandingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OutstandingAmount
        {
            get { return _outstandingAmount; }
            set 
            {
                if (_outstandingAmount != value)
                {
                    _outstandingAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("refundAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RefundAmount
        {
            get { return _refundAmount; }
            set 
            {
                if (_refundAmount != value)
                {
                    _refundAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceStatus
        {
            get { return _invoiceStatus; }
            set 
            {
                if (_invoiceStatus != value)
                {
                    _invoiceStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalItems
        {
            get { return _totalItems; }
            set 
            {
                if (_totalItems != value)
                {
                    _totalItems = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InvoiceItem> InvoiceItems
        {
            get { return _invoiceItems; }
            set 
            {
                if (_invoiceItems != value)
                {
                    _invoiceItems = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Invoice FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Invoice>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceItem : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private double? _totalAmount;
        private System.Collections.ObjectModel.ObservableCollection<InvoiceSubItem> _subItems;
    
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InvoiceSubItem> SubItems
        {
            get { return _subItems; }
            set 
            {
                if (_subItems != value)
                {
                    _subItems = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvoiceItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvoiceItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceSubItem : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTime? _fromDate;
        private System.DateTime? _toDate;
        private double? _perUnitAmount;
        private double? _totalAmount;
        private string _itemType;
        private int? _quantity;
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("fromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FromDate
        {
            get { return _fromDate; }
            set 
            {
                if (_fromDate != value)
                {
                    _fromDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("toDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ToDate
        {
            get { return _toDate; }
            set 
            {
                if (_toDate != value)
                {
                    _toDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("perUnitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PerUnitAmount
        {
            get { return _perUnitAmount; }
            set 
            {
                if (_perUnitAmount != value)
                {
                    _perUnitAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemType
        {
            get { return _itemType; }
            set 
            {
                if (_itemType != value)
                {
                    _itemType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvoiceSubItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvoiceSubItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceCreditNote : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _invoiceFid;
        private string _chargeRequestFid;
        private System.DateTime? _creditDate;
        private double? _amount;
        private string _currency;
    
        [Newtonsoft.Json.JsonProperty("invoiceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceFid
        {
            get { return _invoiceFid; }
            set 
            {
                if (_invoiceFid != value)
                {
                    _invoiceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("chargeRequestFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeRequestFid
        {
            get { return _chargeRequestFid; }
            set 
            {
                if (_chargeRequestFid != value)
                {
                    _chargeRequestFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("creditDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreditDate
        {
            get { return _creditDate; }
            set 
            {
                if (_creditDate != value)
                {
                    _creditDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvoiceCreditNote FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvoiceCreditNote>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Products : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Product> _products1;
    
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Product> Products1
        {
            get { return _products1; }
            set 
            {
                if (_products1 != value)
                {
                    _products1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Products FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Products>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Product : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private int? _productType;
        private string _parentFid;
        private string _statementDescription;
        private int? _trialDays;
        private string _defaultPriceFid;
        private ProductPrice _defaultPrice;
        private long? _taxable;
        private string _taxGroupFid;
        private long? _maxQuantity;
        private int? _allowQuantity;
    
        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductType
        {
            get { return _productType; }
            set 
            {
                if (_productType != value)
                {
                    _productType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentFid
        {
            get { return _parentFid; }
            set 
            {
                if (_parentFid != value)
                {
                    _parentFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("statementDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementDescription
        {
            get { return _statementDescription; }
            set 
            {
                if (_statementDescription != value)
                {
                    _statementDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("trialDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrialDays
        {
            get { return _trialDays; }
            set 
            {
                if (_trialDays != value)
                {
                    _trialDays = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defaultPriceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultPriceFid
        {
            get { return _defaultPriceFid; }
            set 
            {
                if (_defaultPriceFid != value)
                {
                    _defaultPriceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("defaultPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductPrice DefaultPrice
        {
            get { return _defaultPrice; }
            set 
            {
                if (_defaultPrice != value)
                {
                    _defaultPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Taxable
        {
            get { return _taxable; }
            set 
            {
                if (_taxable != value)
                {
                    _taxable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxGroupFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxGroupFid
        {
            get { return _taxGroupFid; }
            set 
            {
                if (_taxGroupFid != value)
                {
                    _taxGroupFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MaxQuantity
        {
            get { return _maxQuantity; }
            set 
            {
                if (_maxQuantity != value)
                {
                    _maxQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("allowQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AllowQuantity
        {
            get { return _allowQuantity; }
            set 
            {
                if (_allowQuantity != value)
                {
                    _allowQuantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Product FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Product>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProductGroups : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ProductGroup> _groups;
    
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ProductGroup> Groups
        {
            get { return _groups; }
            set 
            {
                if (_groups != value)
                {
                    _groups = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProductGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductGroups>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProductGroup : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Fid> _products;
    
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Fid> Products
        {
            get { return _products; }
            set 
            {
                if (_products != value)
                {
                    _products = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProductGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductGroup>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProductPrices : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ProductPrice> _prices;
    
        [Newtonsoft.Json.JsonProperty("prices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ProductPrice> Prices
        {
            get { return _prices; }
            set 
            {
                if (_prices != value)
                {
                    _prices = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProductPrices FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductPrices>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProductPrice : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _productFid;
        private string _currency;
        private string _price;
        private string _setupFee;
        private CycleTermType? _cycleType;
        private double? _cycleTerm;
        private string _cycleExact;
        private string _cycle;
    
        [Newtonsoft.Json.JsonProperty("productFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductFid
        {
            get { return _productFid; }
            set 
            {
                if (_productFid != value)
                {
                    _productFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SetupFee
        {
            get { return _setupFee; }
            set 
            {
                if (_setupFee != value)
                {
                    _setupFee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cycleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CycleTermType? CycleType
        {
            get { return _cycleType; }
            set 
            {
                if (_cycleType != value)
                {
                    _cycleType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cycleTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CycleTerm
        {
            get { return _cycleTerm; }
            set 
            {
                if (_cycleTerm != value)
                {
                    _cycleTerm = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cycleExact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CycleExact
        {
            get { return _cycleExact; }
            set 
            {
                if (_cycleExact != value)
                {
                    _cycleExact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Interval in ISO 8601 standard</summary>
        [Newtonsoft.Json.JsonProperty("cycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cycle
        {
            get { return _cycle; }
            set 
            {
                if (_cycle != value)
                {
                    _cycle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProductPrice FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductPrice>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Result of a fraud scan</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FraudScan : System.ComponentModel.INotifyPropertyChanged
    {
        private string _service;
        private string _score;
        private string _message;
        private string _requestId;
        private string _recommendation;
        private System.Collections.ObjectModel.ObservableCollection<FraudScanMetaData> _metaDataItems;
    
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service
        {
            get { return _service; }
            set 
            {
                if (_service != value)
                {
                    _service = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Score
        {
            get { return _score; }
            set 
            {
                if (_score != value)
                {
                    _score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId
        {
            get { return _requestId; }
            set 
            {
                if (_requestId != value)
                {
                    _requestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("recommendation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recommendation
        {
            get { return _recommendation; }
            set 
            {
                if (_recommendation != value)
                {
                    _recommendation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("metaDataItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FraudScanMetaData> MetaDataItems
        {
            get { return _metaDataItems; }
            set 
            {
                if (_metaDataItems != value)
                {
                    _metaDataItems = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FraudScan FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FraudScan>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Individual fraud scan metadata item</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FraudScanMetaData : System.ComponentModel.INotifyPropertyChanged
    {
        private string _key;
        private string _value;
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FraudScanMetaData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FraudScanMetaData>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CalculatedSubscriptionModification : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _nextRenewalAmount;
        private double? _nextRenewalDiscount;
        private double? _nextRenewalTax;
        private double? _nextRenewalTotal;
        private double? _setupAmount;
        private double? _setupDiscount;
        private double? _chargeAmount;
        private double? _chargeTax;
        private double? _chargeTotal;
    
        [Newtonsoft.Json.JsonProperty("nextRenewalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NextRenewalAmount
        {
            get { return _nextRenewalAmount; }
            set 
            {
                if (_nextRenewalAmount != value)
                {
                    _nextRenewalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nextRenewalDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NextRenewalDiscount
        {
            get { return _nextRenewalDiscount; }
            set 
            {
                if (_nextRenewalDiscount != value)
                {
                    _nextRenewalDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nextRenewalTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NextRenewalTax
        {
            get { return _nextRenewalTax; }
            set 
            {
                if (_nextRenewalTax != value)
                {
                    _nextRenewalTax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nextRenewalTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NextRenewalTotal
        {
            get { return _nextRenewalTotal; }
            set 
            {
                if (_nextRenewalTotal != value)
                {
                    _nextRenewalTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupAmount
        {
            get { return _setupAmount; }
            set 
            {
                if (_setupAmount != value)
                {
                    _setupAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupDiscount
        {
            get { return _setupDiscount; }
            set 
            {
                if (_setupDiscount != value)
                {
                    _setupDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("chargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargeAmount
        {
            get { return _chargeAmount; }
            set 
            {
                if (_chargeAmount != value)
                {
                    _chargeAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("chargeTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargeTax
        {
            get { return _chargeTax; }
            set 
            {
                if (_chargeTax != value)
                {
                    _chargeTax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("chargeTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargeTotal
        {
            get { return _chargeTotal; }
            set 
            {
                if (_chargeTotal != value)
                {
                    _chargeTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CalculatedSubscriptionModification FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalculatedSubscriptionModification>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Order : Fid, System.ComponentModel.INotifyPropertyChanged
    {
        private string _orderHash;
        private double? _state;
        private string _queueFid;
        private string _offerFid;
        private string _couponCode;
        private double? _amount;
        private double? _setupAmount;
        private double? _setupDiscountAmount;
        private double? _taxAmount;
        private double? _totalAmount;
        private string _currency;
        private string _country;
        private double? _discountAmount;
        private string _discountType;
        private string _approvedByFid;
        private string _userAgent;
        private string _userIp;
        private string _paymentAccountFid;
        private string _paymentServiceType;
        private string _lastPaymentFid;
        private string _brandFid;
        private string _customerFid;
        private string _fraudFid;
        private string _invoiceFid;
        private double? _amountPaid;
        private string _authorizeId;
    
        [Newtonsoft.Json.JsonProperty("orderHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderHash
        {
            get { return _orderHash; }
            set 
            {
                if (_orderHash != value)
                {
                    _orderHash = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("queueFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueFid
        {
            get { return _queueFid; }
            set 
            {
                if (_queueFid != value)
                {
                    _queueFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("offerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfferFid
        {
            get { return _offerFid; }
            set 
            {
                if (_offerFid != value)
                {
                    _offerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("couponCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CouponCode
        {
            get { return _couponCode; }
            set 
            {
                if (_couponCode != value)
                {
                    _couponCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupAmount
        {
            get { return _setupAmount; }
            set 
            {
                if (_setupAmount != value)
                {
                    _setupAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupDiscountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupDiscountAmount
        {
            get { return _setupDiscountAmount; }
            set 
            {
                if (_setupDiscountAmount != value)
                {
                    _setupDiscountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAmount
        {
            get { return _taxAmount; }
            set 
            {
                if (_taxAmount != value)
                {
                    _taxAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountType
        {
            get { return _discountType; }
            set 
            {
                if (_discountType != value)
                {
                    _discountType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("approvedByFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApprovedByFid
        {
            get { return _approvedByFid; }
            set 
            {
                if (_approvedByFid != value)
                {
                    _approvedByFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAgent
        {
            get { return _userAgent; }
            set 
            {
                if (_userAgent != value)
                {
                    _userAgent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userIp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserIp
        {
            get { return _userIp; }
            set 
            {
                if (_userIp != value)
                {
                    _userIp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentAccountFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAccountFid
        {
            get { return _paymentAccountFid; }
            set 
            {
                if (_paymentAccountFid != value)
                {
                    _paymentAccountFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentServiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentServiceType
        {
            get { return _paymentServiceType; }
            set 
            {
                if (_paymentServiceType != value)
                {
                    _paymentServiceType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastPaymentFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastPaymentFid
        {
            get { return _lastPaymentFid; }
            set 
            {
                if (_lastPaymentFid != value)
                {
                    _lastPaymentFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerFid
        {
            get { return _customerFid; }
            set 
            {
                if (_customerFid != value)
                {
                    _customerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fraudFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FraudFid
        {
            get { return _fraudFid; }
            set 
            {
                if (_fraudFid != value)
                {
                    _fraudFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("invoiceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceFid
        {
            get { return _invoiceFid; }
            set 
            {
                if (_invoiceFid != value)
                {
                    _invoiceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountPaid
        {
            get { return _amountPaid; }
            set 
            {
                if (_amountPaid != value)
                {
                    _amountPaid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("authorizeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizeId
        {
            get { return _authorizeId; }
            set 
            {
                if (_authorizeId != value)
                {
                    _authorizeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Order FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderProducts : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<OrderProduct> _products;
    
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OrderProduct> Products
        {
            get { return _products; }
            set 
            {
                if (_products != value)
                {
                    _products = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderProducts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderProducts>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderAddProducts : OrderProducts, System.ComponentModel.INotifyPropertyChanged
    {
        private Order _order;
    
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Order Order
        {
            get { return _order; }
            set 
            {
                if (_order != value)
                {
                    _order = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderAddProducts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderAddProducts>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderProduct : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private double? _price;
        private string _priceFid;
        private string _offerFid;
        private string _productFid;
        private long? _quantity;
        private System.DateTime? _renewalDate;
        private string _purchaseFid;
        private string _currency;
        private double? _discountAmount;
        private double? _setupFee;
        private double? _setupDiscountAmount;
        private double? _taxAmount;
        private double? _totalAmount;
        private double? _cycleType;
        private double? _cycleTerm;
        private string _cycleExact;
        private string _cycle;
        private string _parentFid;
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PriceFid
        {
            get { return _priceFid; }
            set 
            {
                if (_priceFid != value)
                {
                    _priceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("offerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfferFid
        {
            get { return _offerFid; }
            set 
            {
                if (_offerFid != value)
                {
                    _offerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("productFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductFid
        {
            get { return _productFid; }
            set 
            {
                if (_productFid != value)
                {
                    _productFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("renewalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RenewalDate
        {
            get { return _renewalDate; }
            set 
            {
                if (_renewalDate != value)
                {
                    _renewalDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("purchaseFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseFid
        {
            get { return _purchaseFid; }
            set 
            {
                if (_purchaseFid != value)
                {
                    _purchaseFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupFee
        {
            get { return _setupFee; }
            set 
            {
                if (_setupFee != value)
                {
                    _setupFee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupDiscountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupDiscountAmount
        {
            get { return _setupDiscountAmount; }
            set 
            {
                if (_setupDiscountAmount != value)
                {
                    _setupDiscountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAmount
        {
            get { return _taxAmount; }
            set 
            {
                if (_taxAmount != value)
                {
                    _taxAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAmount
        {
            get { return _totalAmount; }
            set 
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cycleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CycleType
        {
            get { return _cycleType; }
            set 
            {
                if (_cycleType != value)
                {
                    _cycleType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cycleTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CycleTerm
        {
            get { return _cycleTerm; }
            set 
            {
                if (_cycleTerm != value)
                {
                    _cycleTerm = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cycleExact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CycleExact
        {
            get { return _cycleExact; }
            set 
            {
                if (_cycleExact != value)
                {
                    _cycleExact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Interval in ISO 8601 standard</summary>
        [Newtonsoft.Json.JsonProperty("cycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cycle
        {
            get { return _cycle; }
            set 
            {
                if (_cycle != value)
                {
                    _cycle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentFid
        {
            get { return _parentFid; }
            set 
            {
                if (_parentFid != value)
                {
                    _parentFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderProduct FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderProduct>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderVerification : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _requireRedirect;
        private string _redirectUrl;
    
        [Newtonsoft.Json.JsonProperty("requireRedirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequireRedirect
        {
            get { return _requireRedirect; }
            set 
            {
                if (_requireRedirect != value)
                {
                    _requireRedirect = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("redirectUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedirectUrl
        {
            get { return _redirectUrl; }
            set 
            {
                if (_redirectUrl != value)
                {
                    _redirectUrl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderVerification FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderVerification>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderConfirmation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _paymentAccountFid;
        private PaymentMode? _paymentMode;
        private bool? _success;
        private string _message;
    
        [Newtonsoft.Json.JsonProperty("paymentAccountFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAccountFid
        {
            get { return _paymentAccountFid; }
            set 
            {
                if (_paymentAccountFid != value)
                {
                    _paymentAccountFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentMode? PaymentMode
        {
            get { return _paymentMode; }
            set 
            {
                if (_paymentMode != value)
                {
                    _paymentMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success
        {
            get { return _success; }
            set 
            {
                if (_success != value)
                {
                    _success = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderConfirmation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderConfirmation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PaymentAccounts : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<PaymentAccount> _accounts;
    
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PaymentAccount> Accounts
        {
            get { return _accounts; }
            set 
            {
                if (_accounts != value)
                {
                    _accounts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentAccounts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentAccounts>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PaypalInit : System.ComponentModel.INotifyPropertyChanged
    {
        private string _redirectUrl;
    
        [Newtonsoft.Json.JsonProperty("redirectUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedirectUrl
        {
            get { return _redirectUrl; }
            set 
            {
                if (_redirectUrl != value)
                {
                    _redirectUrl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaypalInit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaypalInit>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PaymentAccount : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private PaymentAccountType? _accountType;
        private PaymentMethod? _paymentMethod;
        private PaymentMode? _paymentMode;
    
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentAccountType? AccountType
        {
            get { return _accountType; }
            set 
            {
                if (_accountType != value)
                {
                    _accountType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentMethod? PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentMode? PaymentMode
        {
            get { return _paymentMode; }
            set 
            {
                if (_paymentMode != value)
                {
                    _paymentMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentAccount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentAccount>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PaymentCards : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<PaymentCard> _cards;
    
        [Newtonsoft.Json.JsonProperty("cards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PaymentCard> Cards
        {
            get { return _cards; }
            set 
            {
                if (_cards != value)
                {
                    _cards = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentCards FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentCards>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PaymentCard : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _nameOnCard;
        private double? _expiryMonth;
        private double? _expiryYear;
        private double? _issue;
        private double? _last4;
        private string _cardType;
    
        [Newtonsoft.Json.JsonProperty("nameOnCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameOnCard
        {
            get { return _nameOnCard; }
            set 
            {
                if (_nameOnCard != value)
                {
                    _nameOnCard = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expiryMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExpiryMonth
        {
            get { return _expiryMonth; }
            set 
            {
                if (_expiryMonth != value)
                {
                    _expiryMonth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("expiryYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExpiryYear
        {
            get { return _expiryYear; }
            set 
            {
                if (_expiryYear != value)
                {
                    _expiryYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Issue
        {
            get { return _issue; }
            set 
            {
                if (_issue != value)
                {
                    _issue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("last4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Last4
        {
            get { return _last4; }
            set 
            {
                if (_last4 != value)
                {
                    _last4 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardType
        {
            get { return _cardType; }
            set 
            {
                if (_cardType != value)
                {
                    _cardType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentCard FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentCard>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Addresses : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Address> _addresses1;
    
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Address> Addresses1
        {
            get { return _addresses1; }
            set 
            {
                if (_addresses1 != value)
                {
                    _addresses1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Addresses FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Addresses>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Address : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _address1;
        private string _address2;
        private string _address3;
        private string _town;
        private string _county;
        private string _country;
        private string _postalCode;
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address1
        {
            get { return _address1; }
            set 
            {
                if (_address1 != value)
                {
                    _address1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2
        {
            get { return _address2; }
            set 
            {
                if (_address2 != value)
                {
                    _address2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address3
        {
            get { return _address3; }
            set 
            {
                if (_address3 != value)
                {
                    _address3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Town
        {
            get { return _town; }
            set 
            {
                if (_town != value)
                {
                    _town = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode
        {
            get { return _postalCode; }
            set 
            {
                if (_postalCode != value)
                {
                    _postalCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Address FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Address>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConfigItems : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ConfigItem> _items;
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ConfigItem> Items
        {
            get { return _items; }
            set 
            {
                if (_items != value)
                {
                    _items = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfigItems FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigItems>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConfigItem : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _entityFid;
        private string _sectionName;
        private string _itemName;
        private string _value;
    
        [Newtonsoft.Json.JsonProperty("entityFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityFid
        {
            get { return _entityFid; }
            set 
            {
                if (_entityFid != value)
                {
                    _entityFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SectionName
        {
            get { return _sectionName; }
            set 
            {
                if (_sectionName != value)
                {
                    _sectionName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("itemName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemName
        {
            get { return _itemName; }
            set 
            {
                if (_itemName != value)
                {
                    _itemName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfigItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigItem>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PaymentGateways : Pagination, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<PaymentGateway> _gateways;
    
        [Newtonsoft.Json.JsonProperty("gateways", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PaymentGateway> Gateways
        {
            get { return _gateways; }
            set 
            {
                if (_gateways != value)
                {
                    _gateways = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentGateways FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentGateways>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PaymentGateway : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _externalId;
        private bool? _enabled;
        private System.Collections.ObjectModel.ObservableCollection<string> _brands;
        private System.Collections.ObjectModel.ObservableCollection<string> _currencies;
        private System.Collections.ObjectModel.ObservableCollection<string> _cardTypes;
        private string _provider;
    
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId
        {
            get { return _externalId; }
            set 
            {
                if (_externalId != value)
                {
                    _externalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled
        {
            get { return _enabled; }
            set 
            {
                if (_enabled != value)
                {
                    _enabled = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("brands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Brands
        {
            get { return _brands; }
            set 
            {
                if (_brands != value)
                {
                    _brands = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Currencies
        {
            get { return _currencies; }
            set 
            {
                if (_currencies != value)
                {
                    _currencies = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cardTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> CardTypes
        {
            get { return _cardTypes; }
            set 
            {
                if (_cardTypes != value)
                {
                    _cardTypes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider
        {
            get { return _provider; }
            set 
            {
                if (_provider != value)
                {
                    _provider = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PaymentGateway FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentGateway>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProductOffers : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ProductOffer> _offers;
    
        [Newtonsoft.Json.JsonProperty("offers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ProductOffer> Offers
        {
            get { return _offers; }
            set 
            {
                if (_offers != value)
                {
                    _offers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProductOffers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductOffers>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProductOffer : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _couponCode;
        private string _applyFid;
        private int? _maxUsages;
        private System.DateTime? _expiryTime;
        private double? _discountAmount;
        private DiscountType? _discountType;
        private double? _setupDiscountAmount;
        private DiscountType? _setupDiscountType;
        private int? _term;
        private CycleTermType? _termType;
        private string _cycle;
        private string _period;
        private bool? _restrictive;
    
        [Newtonsoft.Json.JsonProperty("couponCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CouponCode
        {
            get { return _couponCode; }
            set 
            {
                if (_couponCode != value)
                {
                    _couponCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("applyFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplyFid
        {
            get { return _applyFid; }
            set 
            {
                if (_applyFid != value)
                {
                    _applyFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxUsages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxUsages
        {
            get { return _maxUsages; }
            set 
            {
                if (_maxUsages != value)
                {
                    _maxUsages = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("expiryTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpiryTime
        {
            get { return _expiryTime; }
            set 
            {
                if (_expiryTime != value)
                {
                    _expiryTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount
        {
            get { return _discountAmount; }
            set 
            {
                if (_discountAmount != value)
                {
                    _discountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("discountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiscountType? DiscountType
        {
            get { return _discountType; }
            set 
            {
                if (_discountType != value)
                {
                    _discountType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupDiscountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SetupDiscountAmount
        {
            get { return _setupDiscountAmount; }
            set 
            {
                if (_setupDiscountAmount != value)
                {
                    _setupDiscountAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("setupDiscountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiscountType? SetupDiscountType
        {
            get { return _setupDiscountType; }
            set 
            {
                if (_setupDiscountType != value)
                {
                    _setupDiscountType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("term", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Term
        {
            get { return _term; }
            set 
            {
                if (_term != value)
                {
                    _term = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("termType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CycleTermType? TermType
        {
            get { return _termType; }
            set 
            {
                if (_termType != value)
                {
                    _termType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Interval in ISO 8601 standard</summary>
        [Newtonsoft.Json.JsonProperty("cycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cycle
        {
            get { return _cycle; }
            set 
            {
                if (_cycle != value)
                {
                    _cycle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Interval in ISO 8601 standard</summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Period
        {
            get { return _period; }
            set 
            {
                if (_period != value)
                {
                    _period = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("restrictive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Restrictive
        {
            get { return _restrictive; }
            set 
            {
                if (_restrictive != value)
                {
                    _restrictive = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProductOffer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductOffer>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Tickets : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Ticket> _tickets1;
    
        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Ticket> Tickets1
        {
            get { return _tickets1; }
            set 
            {
                if (_tickets1 != value)
                {
                    _tickets1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tickets FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tickets>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Generic Response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Ticket : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _hash;
        private string _customerFid;
        private string _companyFid;
        private string _departmentFid;
        private string _queueFid;
        private string _agentFid;
        private string _slaFid;
        private string _ticketType;
        private double? _status;
        private double? _impact;
        private double? _urgency;
        private double? _priority;
        private double? _tier;
        private string _outboundEmail;
        private string _outboundName;
        private string _inboundEmail;
        private string _inboundName;
        private bool? _isSpam;
        private double? _responseTargetTime;
        private double? _resolveTargetTime;
        private double? _postCount;
        private double? _lastReplySentTime;
        private double? _lastReplyReceivedTime;
        private double? _priorityAdjustment;
        private bool? _locked;
        private string _lockedByFid;
        private double? _attachments;
        private bool? _restrictedAccess;
        private string _cc;
        private string _bcc;
        private string _language;
        private double? _dataCreated;
        private double? _dateModified;
    
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash
        {
            get { return _hash; }
            set 
            {
                if (_hash != value)
                {
                    _hash = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerFid
        {
            get { return _customerFid; }
            set 
            {
                if (_customerFid != value)
                {
                    _customerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("companyFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyFid
        {
            get { return _companyFid; }
            set 
            {
                if (_companyFid != value)
                {
                    _companyFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("departmentFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepartmentFid
        {
            get { return _departmentFid; }
            set 
            {
                if (_departmentFid != value)
                {
                    _departmentFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("queueFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueFid
        {
            get { return _queueFid; }
            set 
            {
                if (_queueFid != value)
                {
                    _queueFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("agentFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentFid
        {
            get { return _agentFid; }
            set 
            {
                if (_agentFid != value)
                {
                    _agentFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("slaFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SlaFid
        {
            get { return _slaFid; }
            set 
            {
                if (_slaFid != value)
                {
                    _slaFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ticketType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TicketType
        {
            get { return _ticketType; }
            set 
            {
                if (_ticketType != value)
                {
                    _ticketType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("impact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Impact
        {
            get { return _impact; }
            set 
            {
                if (_impact != value)
                {
                    _impact = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("urgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Urgency
        {
            get { return _urgency; }
            set 
            {
                if (_urgency != value)
                {
                    _urgency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Priority
        {
            get { return _priority; }
            set 
            {
                if (_priority != value)
                {
                    _priority = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tier
        {
            get { return _tier; }
            set 
            {
                if (_tier != value)
                {
                    _tier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outboundEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutboundEmail
        {
            get { return _outboundEmail; }
            set 
            {
                if (_outboundEmail != value)
                {
                    _outboundEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outboundName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutboundName
        {
            get { return _outboundName; }
            set 
            {
                if (_outboundName != value)
                {
                    _outboundName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inboundEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InboundEmail
        {
            get { return _inboundEmail; }
            set 
            {
                if (_inboundEmail != value)
                {
                    _inboundEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inboundName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InboundName
        {
            get { return _inboundName; }
            set 
            {
                if (_inboundName != value)
                {
                    _inboundName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isSpam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSpam
        {
            get { return _isSpam; }
            set 
            {
                if (_isSpam != value)
                {
                    _isSpam = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("responseTargetTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseTargetTime
        {
            get { return _responseTargetTime; }
            set 
            {
                if (_responseTargetTime != value)
                {
                    _responseTargetTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("resolveTargetTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResolveTargetTime
        {
            get { return _resolveTargetTime; }
            set 
            {
                if (_resolveTargetTime != value)
                {
                    _resolveTargetTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("postCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PostCount
        {
            get { return _postCount; }
            set 
            {
                if (_postCount != value)
                {
                    _postCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastReplySentTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LastReplySentTime
        {
            get { return _lastReplySentTime; }
            set 
            {
                if (_lastReplySentTime != value)
                {
                    _lastReplySentTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lastReplyReceivedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LastReplyReceivedTime
        {
            get { return _lastReplyReceivedTime; }
            set 
            {
                if (_lastReplyReceivedTime != value)
                {
                    _lastReplyReceivedTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("priorityAdjustment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PriorityAdjustment
        {
            get { return _priorityAdjustment; }
            set 
            {
                if (_priorityAdjustment != value)
                {
                    _priorityAdjustment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Locked
        {
            get { return _locked; }
            set 
            {
                if (_locked != value)
                {
                    _locked = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lockedByFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LockedByFid
        {
            get { return _lockedByFid; }
            set 
            {
                if (_lockedByFid != value)
                {
                    _lockedByFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Attachments
        {
            get { return _attachments; }
            set 
            {
                if (_attachments != value)
                {
                    _attachments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("restrictedAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictedAccess
        {
            get { return _restrictedAccess; }
            set 
            {
                if (_restrictedAccess != value)
                {
                    _restrictedAccess = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cc
        {
            get { return _cc; }
            set 
            {
                if (_cc != value)
                {
                    _cc = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("bcc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bcc
        {
            get { return _bcc; }
            set 
            {
                if (_bcc != value)
                {
                    _bcc = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dataCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DataCreated
        {
            get { return _dataCreated; }
            set 
            {
                if (_dataCreated != value)
                {
                    _dataCreated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateModified
        {
            get { return _dateModified; }
            set 
            {
                if (_dateModified != value)
                {
                    _dateModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Ticket FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Ticket>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Reason Groups</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ReasonGroups : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ReasonGroup> _reasonGroups1;
    
        [Newtonsoft.Json.JsonProperty("reasonGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ReasonGroup> ReasonGroups1
        {
            get { return _reasonGroups1; }
            set 
            {
                if (_reasonGroups1 != value)
                {
                    _reasonGroups1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReasonGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReasonGroups>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Reason Group</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ReasonGroup : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _builtIn;
        private double? _reasonCount;
        private ReasonGroupType? _type;
    
        [Newtonsoft.Json.JsonProperty("builtIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BuiltIn
        {
            get { return _builtIn; }
            set 
            {
                if (_builtIn != value)
                {
                    _builtIn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reasonCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReasonCount
        {
            get { return _reasonCount; }
            set 
            {
                if (_reasonCount != value)
                {
                    _reasonCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReasonGroupType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReasonGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReasonGroup>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Reasons</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Reasons : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Reason> _reasons1;
    
        [Newtonsoft.Json.JsonProperty("reasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Reason> Reasons1
        {
            get { return _reasons1; }
            set 
            {
                if (_reasons1 != value)
                {
                    _reasons1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Reasons FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Reasons>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Reason</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Reason : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private string _groupFid;
        private double? _usedCount;
    
        /// <summary>FID for the reason group</summary>
        [Newtonsoft.Json.JsonProperty("groupFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupFid
        {
            get { return _groupFid; }
            set 
            {
                if (_groupFid != value)
                {
                    _groupFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("usedCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UsedCount
        {
            get { return _usedCount; }
            set 
            {
                if (_usedCount != value)
                {
                    _usedCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Reason FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Reason>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Reason</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PropertyValue : System.ComponentModel.INotifyPropertyChanged
    {
        private string _propertyValue1;
    
        /// <summary>Property Value</summary>
        [Newtonsoft.Json.JsonProperty("propertyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyValue1
        {
            get { return _propertyValue1; }
            set 
            {
                if (_propertyValue1 != value)
                {
                    _propertyValue1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PropertyValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PropertyValue>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Services</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Services : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Service> _services1;
    
        [Newtonsoft.Json.JsonProperty("services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Service> Services1
        {
            get { return _services1; }
            set 
            {
                if (_services1 != value)
                {
                    _services1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Services FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Services>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Service</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Service : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _description;
        private string _status;
        private string _inheritedStatus;
        private string _visibility;
        private string _parentServiceFid;
        private double? _id;
        private string _viewPolicy;
        private string _editPolicy;
        private double? _dateCreated;
        private double? _dateModified;
        private double? _dateStateChanged;
        private string _displayName;
        private double? _currentState;
        private string _fid;
        private string _brandFid;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inheritedStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InheritedStatus
        {
            get { return _inheritedStatus; }
            set 
            {
                if (_inheritedStatus != value)
                {
                    _inheritedStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Visibility
        {
            get { return _visibility; }
            set 
            {
                if (_visibility != value)
                {
                    _visibility = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentServiceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentServiceFid
        {
            get { return _parentServiceFid; }
            set 
            {
                if (_parentServiceFid != value)
                {
                    _parentServiceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("viewPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViewPolicy
        {
            get { return _viewPolicy; }
            set 
            {
                if (_viewPolicy != value)
                {
                    _viewPolicy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("editPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EditPolicy
        {
            get { return _editPolicy; }
            set 
            {
                if (_editPolicy != value)
                {
                    _editPolicy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateCreated
        {
            get { return _dateCreated; }
            set 
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateModified
        {
            get { return _dateModified; }
            set 
            {
                if (_dateModified != value)
                {
                    _dateModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateStateChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateStateChanged
        {
            get { return _dateStateChanged; }
            set 
            {
                if (_dateStateChanged != value)
                {
                    _dateStateChanged = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentState
        {
            get { return _currentState; }
            set 
            {
                if (_currentState != value)
                {
                    _currentState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fid
        {
            get { return _fid; }
            set 
            {
                if (_fid != value)
                {
                    _fid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Service FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Service>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>List of chat sessions</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChatSessions : Pagination, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ChatSession> _chatSessions1;
    
        [Newtonsoft.Json.JsonProperty("chatSessions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ChatSession> ChatSessions1
        {
            get { return _chatSessions1; }
            set 
            {
                if (_chatSessions1 != value)
                {
                    _chatSessions1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ChatSessions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChatSessions>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Chat session</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChatSession : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private double? _timeStarted;
        private double? _timeEnded;
    
        [Newtonsoft.Json.JsonProperty("timeStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TimeStarted
        {
            get { return _timeStarted; }
            set 
            {
                if (_timeStarted != value)
                {
                    _timeStarted = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timeEnded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TimeEnded
        {
            get { return _timeEnded; }
            set 
            {
                if (_timeEnded != value)
                {
                    _timeEnded = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ChatSession FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChatSession>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Incident updates</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IncidentUpdates : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<IncidentUpdate> _incidentUpdates1;
    
        [Newtonsoft.Json.JsonProperty("incidentUpdates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<IncidentUpdate> IncidentUpdates1
        {
            get { return _incidentUpdates1; }
            set 
            {
                if (_incidentUpdates1 != value)
                {
                    _incidentUpdates1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IncidentUpdates FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IncidentUpdates>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Incident Update</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IncidentUpdate : System.ComponentModel.INotifyPropertyChanged
    {
        private string _status;
        private string _message;
        private double? _id;
        private string _viewPolicy;
        private string _editPolicy;
        private double? _dateCreated;
        private double? _dateModified;
        private double? _dateStateChanged;
        private string _displayName;
        private string _description;
        private double? _currentState;
        private string _fid;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("viewPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViewPolicy
        {
            get { return _viewPolicy; }
            set 
            {
                if (_viewPolicy != value)
                {
                    _viewPolicy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("editPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EditPolicy
        {
            get { return _editPolicy; }
            set 
            {
                if (_editPolicy != value)
                {
                    _editPolicy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateCreated
        {
            get { return _dateCreated; }
            set 
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateModified
        {
            get { return _dateModified; }
            set 
            {
                if (_dateModified != value)
                {
                    _dateModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateStateChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateStateChanged
        {
            get { return _dateStateChanged; }
            set 
            {
                if (_dateStateChanged != value)
                {
                    _dateStateChanged = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentState
        {
            get { return _currentState; }
            set 
            {
                if (_currentState != value)
                {
                    _currentState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fid
        {
            get { return _fid; }
            set 
            {
                if (_fid != value)
                {
                    _fid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IncidentUpdate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IncidentUpdate>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Service Incidents</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ServiceIncidents : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ServiceIncident> _serviceIncidents1;
    
        [Newtonsoft.Json.JsonProperty("serviceIncidents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ServiceIncident> ServiceIncidents1
        {
            get { return _serviceIncidents1; }
            set 
            {
                if (_serviceIncidents1 != value)
                {
                    _serviceIncidents1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceIncidents FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceIncidents>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Service Incident</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ServiceIncident : Entity, System.ComponentModel.INotifyPropertyChanged
    {
        private double? _timeStarted;
        private double? _timeEnded;
        private string _serviceFid;
        private string _status;
        private double? _dateCreated;
        private double? _dateModified;
        private double? _dateStateChanged;
    
        [Newtonsoft.Json.JsonProperty("timeStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TimeStarted
        {
            get { return _timeStarted; }
            set 
            {
                if (_timeStarted != value)
                {
                    _timeStarted = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("timeEnded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TimeEnded
        {
            get { return _timeEnded; }
            set 
            {
                if (_timeEnded != value)
                {
                    _timeEnded = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("serviceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceFid
        {
            get { return _serviceFid; }
            set 
            {
                if (_serviceFid != value)
                {
                    _serviceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateCreated
        {
            get { return _dateCreated; }
            set 
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateModified
        {
            get { return _dateModified; }
            set 
            {
                if (_dateModified != value)
                {
                    _dateModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("dateStateChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DateStateChanged
        {
            get { return _dateStateChanged; }
            set 
            {
                if (_dateStateChanged != value)
                {
                    _dateStateChanged = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceIncident FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceIncident>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Information about the user attempting to integrate</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IntegrationUser : System.ComponentModel.INotifyPropertyChanged
    {
        private string _displayName;
        private string _userFid;
        private string _employeeFid;
        private System.Collections.ObjectModel.ObservableCollection<string> _roles;
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("userFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserFid
        {
            get { return _userFid; }
            set 
            {
                if (_userFid != value)
                {
                    _userFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("employeeFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployeeFid
        {
            get { return _employeeFid; }
            set 
            {
                if (_employeeFid != value)
                {
                    _employeeFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Role Aliases</summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Roles
        {
            get { return _roles; }
            set 
            {
                if (_roles != value)
                {
                    _roles = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IntegrationUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IntegrationUser>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Service credentials used to verify ownership of a user account</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ServiceAccountCredentialsPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _key;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceAccountCredentialsPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceAccountCredentialsPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceCreditNotePayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _displayName;
        private string _description;
        private string _chargeRequestFid;
        private CreditAmountType _creditAmountType;
        private double _amount;
        private string _reasonFid;
        private string _currency;
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Charge Request FID</summary>
        [Newtonsoft.Json.JsonProperty("chargeRequestFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeRequestFid
        {
            get { return _chargeRequestFid; }
            set 
            {
                if (_chargeRequestFid != value)
                {
                    _chargeRequestFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("creditAmountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreditAmountType CreditAmountType
        {
            get { return _creditAmountType; }
            set 
            {
                if (_creditAmountType != value)
                {
                    _creditAmountType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Reason FID</summary>
        [Newtonsoft.Json.JsonProperty("reasonFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonFid
        {
            get { return _reasonFid; }
            set 
            {
                if (_reasonFid != value)
                {
                    _reasonFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvoiceCreditNotePayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvoiceCreditNotePayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ModifySubscriptionPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _priceFid;
        private string _offerFid;
        private ModifySubscriptionMode? _mode;
    
        /// <summary>Price FID to modify subscription with</summary>
        [Newtonsoft.Json.JsonProperty("priceFid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PriceFid
        {
            get { return _priceFid; }
            set 
            {
                if (_priceFid != value)
                {
                    _priceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Price FID to modify subscription with</summary>
        [Newtonsoft.Json.JsonProperty("offerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfferFid
        {
            get { return _offerFid; }
            set 
            {
                if (_offerFid != value)
                {
                    _offerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifySubscriptionMode? Mode
        {
            get { return _mode; }
            set 
            {
                if (_mode != value)
                {
                    _mode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModifySubscriptionPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModifySubscriptionPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CalculateRefundPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private SubscriptionRefundType _subscriptionRefundType;
        private double? _refundFromDate;
        private bool? _includeDetails;
        private bool? _withTerminationFee;
    
        [Newtonsoft.Json.JsonProperty("subscriptionRefundType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubscriptionRefundType SubscriptionRefundType
        {
            get { return _subscriptionRefundType; }
            set 
            {
                if (_subscriptionRefundType != value)
                {
                    _subscriptionRefundType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp of when to calculate the refund from. Rounded down to the start of the day. Default to start of tomorrow</summary>
        [Newtonsoft.Json.JsonProperty("refundFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RefundFromDate
        {
            get { return _refundFromDate; }
            set 
            {
                if (_refundFromDate != value)
                {
                    _refundFromDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("includeDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeDetails
        {
            get { return _includeDetails; }
            set 
            {
                if (_includeDetails != value)
                {
                    _includeDetails = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("withTerminationFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WithTerminationFee
        {
            get { return _withTerminationFee; }
            set 
            {
                if (_withTerminationFee != value)
                {
                    _withTerminationFee = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CalculateRefundPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalculateRefundPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SubscriptionCancelPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _reasonFid;
        private SubscriptionRefundType _subscriptionRefundType;
        private bool? _cancelAtNextRenewal;
    
        /// <summary>Reason FID</summary>
        [Newtonsoft.Json.JsonProperty("reasonFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonFid
        {
            get { return _reasonFid; }
            set 
            {
                if (_reasonFid != value)
                {
                    _reasonFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptionRefundType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubscriptionRefundType SubscriptionRefundType
        {
            get { return _subscriptionRefundType; }
            set 
            {
                if (_subscriptionRefundType != value)
                {
                    _subscriptionRefundType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancelAtNextRenewal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CancelAtNextRenewal
        {
            get { return _cancelAtNextRenewal; }
            set 
            {
                if (_cancelAtNextRenewal != value)
                {
                    _cancelAtNextRenewal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SubscriptionCancelPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriptionCancelPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreatePolymerPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _polymerCode;
        private string _name;
        private string _parentFid;
        private string _description;
    
        /// <summary>Code for polymer type</summary>
        [Newtonsoft.Json.JsonProperty("polymerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolymerCode
        {
            get { return _polymerCode; }
            set 
            {
                if (_polymerCode != value)
                {
                    _polymerCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Display name for this polymer</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Fid for the parent of this polymer e.g. customerFid</summary>
        [Newtonsoft.Json.JsonProperty("parentFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentFid
        {
            get { return _parentFid; }
            set 
            {
                if (_parentFid != value)
                {
                    _parentFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description for this polymer</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreatePolymerPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatePolymerPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Payload for creating an advertiser</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateAdvertiserPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _username;
        private string _email;
        private string _password;
        private AdvertiserType _type;
        private string _displayName;
        private string _contactName;
        private string _companyName;
        private string _phone;
        private string _website;
        private string _accountManagerFid;
        private string _foundationFid;
        private string _brandFid;
    
        /// <summary>Username</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Email Address</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Password</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdvertiserType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Visible Display Name</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of the person</summary>
        [Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContactName
        {
            get { return _contactName; }
            set 
            {
                if (_contactName != value)
                {
                    _contactName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of the company</summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName
        {
            get { return _companyName; }
            set 
            {
                if (_companyName != value)
                {
                    _companyName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Phone Number</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone
        {
            get { return _phone; }
            set 
            {
                if (_phone != value)
                {
                    _phone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>URL</summary>
        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Website
        {
            get { return _website; }
            set 
            {
                if (_website != value)
                {
                    _website = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of an Account Manager</summary>
        [Newtonsoft.Json.JsonProperty("accountManagerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountManagerFid
        {
            get { return _accountManagerFid; }
            set 
            {
                if (_accountManagerFid != value)
                {
                    _accountManagerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of a valid Foundation</summary>
        [Newtonsoft.Json.JsonProperty("foundationFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FoundationFid
        {
            get { return _foundationFid; }
            set 
            {
                if (_foundationFid != value)
                {
                    _foundationFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of a valid Brand</summary>
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateAdvertiserPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateAdvertiserPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Payload for creating an advertiser campaign</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateAdvertiserCampaignPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _brandFid;
        private string _displayName;
    
        /// <summary>FID of a valid Brand</summary>
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Visible Display Name</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateAdvertiserCampaignPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateAdvertiserCampaignPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Key Value Payload</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class KeyValuePayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _key;
        private string _value;
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static KeyValuePayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyValuePayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostActionPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _transactionId;
        private double? _transactionValue;
        private string _couponCode;
        private bool? _returnPixels = true;
        private string _productCode;
        private string _productTerm;
        private string _paymentMethod;
        private string _username;
        private string _userAgent;
        private string _encoding;
        private string _language;
        private string _clientIp;
        private string _externalReference;
        private string _brandFid;
        private string _campaignHash;
        private string _sid1;
        private string _sid2;
        private string _sid3;
        private System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> _metaData;
        private System.DateTime? _time;
        private bool? _useExistingDeviceIfAvailable;
    
        /// <summary>Your unique transaction ID for this event e.g. Order ID</summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId
        {
            get { return _transactionId; }
            set 
            {
                if (_transactionId != value)
                {
                    _transactionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Your unique transaction ID for this event</summary>
        [Newtonsoft.Json.JsonProperty("transactionValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TransactionValue
        {
            get { return _transactionValue; }
            set 
            {
                if (_transactionValue != value)
                {
                    _transactionValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Coupon code used for the transaction</summary>
        [Newtonsoft.Json.JsonProperty("couponCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CouponCode
        {
            get { return _couponCode; }
            set 
            {
                if (_couponCode != value)
                {
                    _couponCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Setting to true will return advertiser pixels for this event
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnPixels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnPixels
        {
            get { return _returnPixels; }
            set 
            {
                if (_returnPixels != value)
                {
                    _returnPixels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Product Code linked to this action</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode
        {
            get { return _productCode; }
            set 
            {
                if (_productCode != value)
                {
                    _productCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Product Term</summary>
        [Newtonsoft.Json.JsonProperty("productTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductTerm
        {
            get { return _productTerm; }
            set 
            {
                if (_productTerm != value)
                {
                    _productTerm = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Payment method used on this transaction</summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethod
        {
            get { return _paymentMethod; }
            set 
            {
                if (_paymentMethod != value)
                {
                    _paymentMethod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Username associated with this transaction (e.g. Join)</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>User Agent of the visitors browser 'HTTP_USER_AGENT'</summary>
        [Newtonsoft.Json.JsonProperty("userAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAgent
        {
            get { return _userAgent; }
            set 
            {
                if (_userAgent != value)
                {
                    _userAgent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'</summary>
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Encoding
        {
            get { return _encoding; }
            set 
            {
                if (_encoding != value)
                {
                    _encoding = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IP Address of the visitor</summary>
        [Newtonsoft.Json.JsonProperty("clientIp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientIp
        {
            get { return _clientIp; }
            set 
            {
                if (_clientIp != value)
                {
                    _clientIp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>External (to Fortifi) Reference for this visitor e.g. a user ID</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of a valid Brand</summary>
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Advertiser Campaign to track this action to (if not already locked)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campaignHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CampaignHash
        {
            get { return _campaignHash; }
            set 
            {
                if (_campaignHash != value)
                {
                    _campaignHash = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Advertised sub tracking ID 1</summary>
        [Newtonsoft.Json.JsonProperty("sid1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sid1
        {
            get { return _sid1; }
            set 
            {
                if (_sid1 != value)
                {
                    _sid1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Advertised sub tracking ID 2</summary>
        [Newtonsoft.Json.JsonProperty("sid2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sid2
        {
            get { return _sid2; }
            set 
            {
                if (_sid2 != value)
                {
                    _sid2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Advertised sub tracking ID 3</summary>
        [Newtonsoft.Json.JsonProperty("sid3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sid3
        {
            get { return _sid3; }
            set 
            {
                if (_sid3 != value)
                {
                    _sid3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("metaData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> MetaData
        {
            get { return _metaData; }
            set 
            {
                if (_metaData != value)
                {
                    _metaData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Time
        {
            get { return _time; }
            set 
            {
                if (_time != value)
                {
                    _time = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If an existing device exists for the visitor, prefer that over the user agent sent in this payload</summary>
        [Newtonsoft.Json.JsonProperty("useExistingDeviceIfAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseExistingDeviceIfAvailable
        {
            get { return _useExistingDeviceIfAvailable; }
            set 
            {
                if (_useExistingDeviceIfAvailable != value)
                {
                    _useExistingDeviceIfAvailable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PostActionPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostActionPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ReverseActionPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _userAgent;
        private string _encoding;
        private string _language;
        private string _clientIp;
        private string _externalReference;
        private System.DateTime? _time;
        private System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> _metaData;
        private string _sourceTransactionId;
        private ReversalReason? _reason;
        private double? _reversalAmount;
        private string _reversalId;
        private string _eventId;
    
        /// <summary>User Agent of the visitors browser 'HTTP_USER_AGENT'</summary>
        [Newtonsoft.Json.JsonProperty("userAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAgent
        {
            get { return _userAgent; }
            set 
            {
                if (_userAgent != value)
                {
                    _userAgent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Encoding from the visitors browser 'HTTP_ACCEPT_ENCODING'</summary>
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Encoding
        {
            get { return _encoding; }
            set 
            {
                if (_encoding != value)
                {
                    _encoding = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Language from visitors browser 'HTTP_ACCEPT_LANGUAGE'</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IP Address of the visitor</summary>
        [Newtonsoft.Json.JsonProperty("clientIp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientIp
        {
            get { return _clientIp; }
            set 
            {
                if (_clientIp != value)
                {
                    _clientIp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>External (to Fortifi) Reference for this visitor e.g. a user ID</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Time
        {
            get { return _time; }
            set 
            {
                if (_time != value)
                {
                    _time = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("metaData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> MetaData
        {
            get { return _metaData; }
            set 
            {
                if (_metaData != value)
                {
                    _metaData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Your unique transaction ID for the event to be reversed</summary>
        [Newtonsoft.Json.JsonProperty("sourceTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceTransactionId
        {
            get { return _sourceTransactionId; }
            set 
            {
                if (_sourceTransactionId != value)
                {
                    _sourceTransactionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReversalReason? Reason
        {
            get { return _reason; }
            set 
            {
                if (_reason != value)
                {
                    _reason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Amount of revene refunded to the client from the original transaction / chargeback amount</summary>
        [Newtonsoft.Json.JsonProperty("reversalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReversalAmount
        {
            get { return _reversalAmount; }
            set 
            {
                if (_reversalAmount != value)
                {
                    _reversalAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Your unique transaction ID for this event e.g. Refund ID</summary>
        [Newtonsoft.Json.JsonProperty("reversalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReversalId
        {
            get { return _reversalId; }
            set 
            {
                if (_reversalId != value)
                {
                    _reversalId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If known, the Fortifi event ID for this visitors action</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReverseActionPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReverseActionPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Payload for creating a customer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateCustomerPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _visitorId;
        private string _clientIp;
        private string _externalReference;
        private System.DateTime? _time;
        private string _brandFid;
        private string _currency;
        private string _phoneNumber;
        private string _email;
        private string _firstName;
        private string _lastName;
        private string _accountManagerFid;
        private CustomerAccountType? _accountType;
        private CustomerAccountStatus? _accountStatus;
        private CustomerLifecycle? _lifecycle;
        private CustomerSubscriptionType? _subscriptionType;
        private string _language;
    
        /// <summary>Visitor ID of the visitor</summary>
        [Newtonsoft.Json.JsonProperty("visitorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VisitorId
        {
            get { return _visitorId; }
            set 
            {
                if (_visitorId != value)
                {
                    _visitorId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IP Address of the visitor</summary>
        [Newtonsoft.Json.JsonProperty("clientIp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientIp
        {
            get { return _clientIp; }
            set 
            {
                if (_clientIp != value)
                {
                    _clientIp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>External (to Fortifi) Reference e.g. your internal Unique ID</summary>
        [Newtonsoft.Json.JsonProperty("externalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalReference
        {
            get { return _externalReference; }
            set 
            {
                if (_externalReference != value)
                {
                    _externalReference = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Time
        {
            get { return _time; }
            set 
            {
                if (_time != value)
                {
                    _time = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of a valid Brand</summary>
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Phone Number</summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set 
            {
                if (_phoneNumber != value)
                {
                    _phoneNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Email Address</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>First Name</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName
        {
            get { return _firstName; }
            set 
            {
                if (_firstName != value)
                {
                    _firstName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Last Name</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName
        {
            get { return _lastName; }
            set 
            {
                if (_lastName != value)
                {
                    _lastName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of an Account Manager</summary>
        [Newtonsoft.Json.JsonProperty("accountManagerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountManagerFid
        {
            get { return _accountManagerFid; }
            set 
            {
                if (_accountManagerFid != value)
                {
                    _accountManagerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerAccountType? AccountType
        {
            get { return _accountType; }
            set 
            {
                if (_accountType != value)
                {
                    _accountType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("accountStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerAccountStatus? AccountStatus
        {
            get { return _accountStatus; }
            set 
            {
                if (_accountStatus != value)
                {
                    _accountStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerLifecycle? Lifecycle
        {
            get { return _lifecycle; }
            set 
            {
                if (_lifecycle != value)
                {
                    _lifecycle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subscriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerSubscriptionType? SubscriptionType
        {
            get { return _subscriptionType; }
            set 
            {
                if (_subscriptionType != value)
                {
                    _subscriptionType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Language</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateCustomerPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateCustomerPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SetCustomerLocationPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _continent;
        private string _country;
        private string _county;
        private string _city;
        private string _postal;
        private string _timezone;
        private string _clientIp;
    
        /// <summary>Continent</summary>
        [Newtonsoft.Json.JsonProperty("continent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Continent
        {
            get { return _continent; }
            set 
            {
                if (_continent != value)
                {
                    _continent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Country</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>County</summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string County
        {
            get { return _county; }
            set 
            {
                if (_county != value)
                {
                    _county = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>City</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Postal</summary>
        [Newtonsoft.Json.JsonProperty("postal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal
        {
            get { return _postal; }
            set 
            {
                if (_postal != value)
                {
                    _postal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timezone</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone
        {
            get { return _timezone; }
            set 
            {
                if (_timezone != value)
                {
                    _timezone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Client IP Address</summary>
        [Newtonsoft.Json.JsonProperty("clientIp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientIp
        {
            get { return _clientIp; }
            set 
            {
                if (_clientIp != value)
                {
                    _clientIp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SetCustomerLocationPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetCustomerLocationPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SetAccountStatusPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private CustomerAccountStatus? _accountStatus;
    
        [Newtonsoft.Json.JsonProperty("accountStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerAccountStatus? AccountStatus
        {
            get { return _accountStatus; }
            set 
            {
                if (_accountStatus != value)
                {
                    _accountStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SetAccountStatusPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetAccountStatusPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SetAccountTypePayload : System.ComponentModel.INotifyPropertyChanged
    {
        private CustomerAccountType? _accountType;
    
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerAccountType? AccountType
        {
            get { return _accountType; }
            set 
            {
                if (_accountType != value)
                {
                    _accountType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SetAccountTypePayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetAccountTypePayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Subscription Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SetSubscriptionTypePayload : System.ComponentModel.INotifyPropertyChanged
    {
        private CustomerSubscriptionType? _subscriptionType;
    
        [Newtonsoft.Json.JsonProperty("subscriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerSubscriptionType? SubscriptionType
        {
            get { return _subscriptionType; }
            set 
            {
                if (_subscriptionType != value)
                {
                    _subscriptionType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SetSubscriptionTypePayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetSubscriptionTypePayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Value Property</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PropertyValuePayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _propertyValue;
    
        /// <summary>Property Value</summary>
        [Newtonsoft.Json.JsonProperty("propertyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyValue
        {
            get { return _propertyValue; }
            set 
            {
                if (_propertyValue != value)
                {
                    _propertyValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PropertyValuePayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PropertyValuePayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Set Many Properties</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PropertyBulkSetPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> _values;
        private System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> _flags;
        private System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> _incrementCounters;
        private System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> _decrementCounters;
    
        /// <summary>Additional information to store</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> Values
        {
            get { return _values; }
            set 
            {
                if (_values != value)
                {
                    _values = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Additional information to store</summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> Flags
        {
            get { return _flags; }
            set 
            {
                if (_flags != value)
                {
                    _flags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Additional information to store</summary>
        [Newtonsoft.Json.JsonProperty("incrementCounters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> IncrementCounters
        {
            get { return _incrementCounters; }
            set 
            {
                if (_incrementCounters != value)
                {
                    _incrementCounters = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Additional information to store</summary>
        [Newtonsoft.Json.JsonProperty("decrementCounters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> DecrementCounters
        {
            get { return _decrementCounters; }
            set 
            {
                if (_decrementCounters != value)
                {
                    _decrementCounters = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PropertyBulkSetPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PropertyBulkSetPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Flag Property</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PropertyFlagPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _propertyValue;
    
        /// <summary>Property Flag Value</summary>
        [Newtonsoft.Json.JsonProperty("propertyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PropertyValue
        {
            get { return _propertyValue; }
            set 
            {
                if (_propertyValue != value)
                {
                    _propertyValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PropertyFlagPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PropertyFlagPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Counter Property</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PropertyCounterPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _propertyValue;
    
        /// <summary>Property Counter Adjustment</summary>
        [Newtonsoft.Json.JsonProperty("propertyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PropertyValue
        {
            get { return _propertyValue; }
            set 
            {
                if (_propertyValue != value)
                {
                    _propertyValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PropertyCounterPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PropertyCounterPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TriggerActionPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> _metaData;
        private System.DateTime? _time;
        private string _alias;
        private bool? _triggerMessenger;
    
        [Newtonsoft.Json.JsonProperty("metaData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePayload> MetaData
        {
            get { return _metaData; }
            set 
            {
                if (_metaData != value)
                {
                    _metaData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Time
        {
            get { return _time; }
            set 
            {
                if (_time != value)
                {
                    _time = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Your alias for the event to be triggered</summary>
        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias
        {
            get { return _alias; }
            set 
            {
                if (_alias != value)
                {
                    _alias = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If set to true, transactional messenger chains will be triggered</summary>
        [Newtonsoft.Json.JsonProperty("triggerMessenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TriggerMessenger
        {
            get { return _triggerMessenger; }
            set 
            {
                if (_triggerMessenger != value)
                {
                    _triggerMessenger = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TriggerActionPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TriggerActionPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CardDataPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _cardDisplayName;
        private string _encryptedCardNumber;
        private int? _startMonth;
        private int? _startYear;
        private int? _expiryMonth;
        private int? _expiryYear;
        private string _last4;
        private string _cardType;
        private int? _issue;
        private string _cardHolder;
        private string _addressFid;
        private string _addressLine1;
        private string _addressLine2;
        private string _addressLine3;
        private string _addressCity;
        private string _addressState;
        private string _addressCountry;
        private string _addressPostal;
        private double? _preAuthAmount;
        private bool? _isDefault;
    
        /// <summary>Visible Display Name</summary>
        [Newtonsoft.Json.JsonProperty("cardDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardDisplayName
        {
            get { return _cardDisplayName; }
            set 
            {
                if (_cardDisplayName != value)
                {
                    _cardDisplayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Card number encrypted using your public key</summary>
        [Newtonsoft.Json.JsonProperty("encryptedCardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncryptedCardNumber
        {
            get { return _encryptedCardNumber; }
            set 
            {
                if (_encryptedCardNumber != value)
                {
                    _encryptedCardNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Start Month of the card</summary>
        [Newtonsoft.Json.JsonProperty("startMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartMonth
        {
            get { return _startMonth; }
            set 
            {
                if (_startMonth != value)
                {
                    _startMonth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Start Year of the card</summary>
        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartYear
        {
            get { return _startYear; }
            set 
            {
                if (_startYear != value)
                {
                    _startYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiration Month of the card</summary>
        [Newtonsoft.Json.JsonProperty("expiryMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpiryMonth
        {
            get { return _expiryMonth; }
            set 
            {
                if (_expiryMonth != value)
                {
                    _expiryMonth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiration Year of the card</summary>
        [Newtonsoft.Json.JsonProperty("expiryYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpiryYear
        {
            get { return _expiryYear; }
            set 
            {
                if (_expiryYear != value)
                {
                    _expiryYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Last 4 digits of the credit card number</summary>
        [Newtonsoft.Json.JsonProperty("last4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last4
        {
            get { return _last4; }
            set 
            {
                if (_last4 != value)
                {
                    _last4 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Card issuer (visa, mastercard, etc)</summary>
        [Newtonsoft.Json.JsonProperty("cardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardType
        {
            get { return _cardType; }
            set 
            {
                if (_cardType != value)
                {
                    _cardType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Issue number of the card</summary>
        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Issue
        {
            get { return _issue; }
            set 
            {
                if (_issue != value)
                {
                    _issue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name as appears on card</summary>
        [Newtonsoft.Json.JsonProperty("cardHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardHolder
        {
            get { return _cardHolder; }
            set 
            {
                if (_cardHolder != value)
                {
                    _cardHolder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of an existing address to use with the card</summary>
        [Newtonsoft.Json.JsonProperty("addressFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressFid
        {
            get { return _addressFid; }
            set 
            {
                if (_addressFid != value)
                {
                    _addressFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Address Line 1 of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Address Line 2 of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Address Line 3 of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>City for the card</summary>
        [Newtonsoft.Json.JsonProperty("addressCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressCity
        {
            get { return _addressCity; }
            set 
            {
                if (_addressCity != value)
                {
                    _addressCity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>State/County of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressState
        {
            get { return _addressState; }
            set 
            {
                if (_addressState != value)
                {
                    _addressState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Country of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressCountry
        {
            get { return _addressCountry; }
            set 
            {
                if (_addressCountry != value)
                {
                    _addressCountry = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Postal/Zip Code of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressPostal
        {
            get { return _addressPostal; }
            set 
            {
                if (_addressPostal != value)
                {
                    _addressPostal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Pre Auth the card for this value to verify the card can be charged.  (Pre Auth will be voided)</summary>
        [Newtonsoft.Json.JsonProperty("preAuthAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PreAuthAmount
        {
            get { return _preAuthAmount; }
            set 
            {
                if (_preAuthAmount != value)
                {
                    _preAuthAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Is this card should be used as the primary card on the account</summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault
        {
            get { return _isDefault; }
            set 
            {
                if (_isDefault != value)
                {
                    _isDefault = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CardDataPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CardDataPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Update card details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CardUpdatePayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _cardHolder;
        private int? _startMonth;
        private int? _startYear;
        private int? _expiryMonth;
        private int? _expiryYear;
        private int? _issue;
        private string _addressFid;
        private string _addressLine1;
        private string _addressLine2;
        private string _addressLine3;
        private string _addressCity;
        private string _addressState;
        private string _addressCountry;
        private string _addressPostal;
        private bool? _asDefault;
    
        /// <summary>Name as appears on card</summary>
        [Newtonsoft.Json.JsonProperty("cardHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardHolder
        {
            get { return _cardHolder; }
            set 
            {
                if (_cardHolder != value)
                {
                    _cardHolder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Start Month of the card</summary>
        [Newtonsoft.Json.JsonProperty("startMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartMonth
        {
            get { return _startMonth; }
            set 
            {
                if (_startMonth != value)
                {
                    _startMonth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Start Year of the card</summary>
        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartYear
        {
            get { return _startYear; }
            set 
            {
                if (_startYear != value)
                {
                    _startYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiration Month of the card</summary>
        [Newtonsoft.Json.JsonProperty("expiryMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpiryMonth
        {
            get { return _expiryMonth; }
            set 
            {
                if (_expiryMonth != value)
                {
                    _expiryMonth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiration Year of the card</summary>
        [Newtonsoft.Json.JsonProperty("expiryYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpiryYear
        {
            get { return _expiryYear; }
            set 
            {
                if (_expiryYear != value)
                {
                    _expiryYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Issue number of the card</summary>
        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Issue
        {
            get { return _issue; }
            set 
            {
                if (_issue != value)
                {
                    _issue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of an existing address to use with the card</summary>
        [Newtonsoft.Json.JsonProperty("addressFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressFid
        {
            get { return _addressFid; }
            set 
            {
                if (_addressFid != value)
                {
                    _addressFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Address Line 1 of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Address Line 2 of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Address Line 3 of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>City for the card</summary>
        [Newtonsoft.Json.JsonProperty("addressCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressCity
        {
            get { return _addressCity; }
            set 
            {
                if (_addressCity != value)
                {
                    _addressCity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>State/County of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressState
        {
            get { return _addressState; }
            set 
            {
                if (_addressState != value)
                {
                    _addressState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Country of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressCountry
        {
            get { return _addressCountry; }
            set 
            {
                if (_addressCountry != value)
                {
                    _addressCountry = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Postal/Zip Code of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressPostal
        {
            get { return _addressPostal; }
            set 
            {
                if (_addressPostal != value)
                {
                    _addressPostal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("asDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AsDefault
        {
            get { return _asDefault; }
            set 
            {
                if (_asDefault != value)
                {
                    _asDefault = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CardUpdatePayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CardUpdatePayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateOrderPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _paymentAccountFid;
        private string _brandFid;
        private string _customerFid;
        private string _clientIp;
        private string _userAgent;
        private CreateOrderType? _type;
        private System.Collections.ObjectModel.ObservableCollection<string> _productPriceFids;
        private System.Collections.ObjectModel.ObservableCollection<string> _offerFids;
    
        /// <summary>FID for the payment account you wish to charge the customer through</summary>
        [Newtonsoft.Json.JsonProperty("paymentAccountFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAccountFid
        {
            get { return _paymentAccountFid; }
            set 
            {
                if (_paymentAccountFid != value)
                {
                    _paymentAccountFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of a valid Brand</summary>
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID for the customer placing the order</summary>
        [Newtonsoft.Json.JsonProperty("customerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerFid
        {
            get { return _customerFid; }
            set 
            {
                if (_customerFid != value)
                {
                    _customerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IP Address of the visitor</summary>
        [Newtonsoft.Json.JsonProperty("clientIp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientIp
        {
            get { return _clientIp; }
            set 
            {
                if (_clientIp != value)
                {
                    _clientIp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>User Agent of the visitors browser 'HTTP_USER_AGENT'</summary>
        [Newtonsoft.Json.JsonProperty("userAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAgent
        {
            get { return _userAgent; }
            set 
            {
                if (_userAgent != value)
                {
                    _userAgent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateOrderType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Product price FIDs to add</summary>
        [Newtonsoft.Json.JsonProperty("productPriceFids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ProductPriceFids
        {
            get { return _productPriceFids; }
            set 
            {
                if (_productPriceFids != value)
                {
                    _productPriceFids = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Offer FIDs to apply to the order</summary>
        [Newtonsoft.Json.JsonProperty("offerFids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> OfferFids
        {
            get { return _offerFids; }
            set 
            {
                if (_offerFids != value)
                {
                    _offerFids = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateOrderPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateOrderPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderProductsPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<string> _productPriceFids;
        private System.Collections.ObjectModel.ObservableCollection<OrderProductQuantityPayload> _quantityProductPriceFids;
    
        /// <summary>Product price FIDs to add</summary>
        [Newtonsoft.Json.JsonProperty("productPriceFids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ProductPriceFids
        {
            get { return _productPriceFids; }
            set 
            {
                if (_productPriceFids != value)
                {
                    _productPriceFids = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Products to add with specified quantity</summary>
        [Newtonsoft.Json.JsonProperty("quantityProductPriceFids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OrderProductQuantityPayload> QuantityProductPriceFids
        {
            get { return _quantityProductPriceFids; }
            set 
            {
                if (_quantityProductPriceFids != value)
                {
                    _quantityProductPriceFids = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderProductsPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderProductsPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderProductQuantityPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _priceFid;
        private long? _quantity = 1L;
    
        /// <summary>Price FID to modify subscription with</summary>
        [Newtonsoft.Json.JsonProperty("priceFid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PriceFid
        {
            get { return _priceFid; }
            set 
            {
                if (_priceFid != value)
                {
                    _priceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderProductQuantityPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderProductQuantityPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConfirmOrderPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _paymentServiceFid;
        private string _paymentAccountFid;
        private PaymentServiceProcessor? _paymentServiceProcessor;
    
        /// <summary>FID for the payment service you wish to charge the customer through</summary>
        [Newtonsoft.Json.JsonProperty("paymentServiceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentServiceFid
        {
            get { return _paymentServiceFid; }
            set 
            {
                if (_paymentServiceFid != value)
                {
                    _paymentServiceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID for the payment account you wish to charge the customer through</summary>
        [Newtonsoft.Json.JsonProperty("paymentAccountFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAccountFid
        {
            get { return _paymentAccountFid; }
            set 
            {
                if (_paymentAccountFid != value)
                {
                    _paymentAccountFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("paymentServiceProcessor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentServiceProcessor? PaymentServiceProcessor
        {
            get { return _paymentServiceProcessor; }
            set 
            {
                if (_paymentServiceProcessor != value)
                {
                    _paymentServiceProcessor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfirmOrderPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmOrderPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConfirmCardOrderPayload : ConfirmOrderPayload, System.ComponentModel.INotifyPropertyChanged
    {
        private string _cvv;
    
        [Newtonsoft.Json.JsonProperty("cvv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cvv
        {
            get { return _cvv; }
            set 
            {
                if (_cvv != value)
                {
                    _cvv = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfirmCardOrderPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmCardOrderPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConfirmOrderWithNewCardPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _cardDisplayName;
        private string _paymentServiceFid;
        private string _encryptedCardNumber;
        private int? _startMonth;
        private int? _startYear;
        private int? _expiryMonth;
        private int? _expiryYear;
        private int? _issue;
        private string _last4;
        private string _cardType;
        private string _cardHolder;
        private string _addressFid;
        private string _addressLine1;
        private string _addressLine2;
        private string _addressLine3;
        private string _addressCity;
        private string _addressState;
        private string _addressCountry;
        private string _addressPostal;
    
        /// <summary>Visible Display Name</summary>
        [Newtonsoft.Json.JsonProperty("cardDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardDisplayName
        {
            get { return _cardDisplayName; }
            set 
            {
                if (_cardDisplayName != value)
                {
                    _cardDisplayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID for the payment service you wish to charge the customer through</summary>
        [Newtonsoft.Json.JsonProperty("paymentServiceFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentServiceFid
        {
            get { return _paymentServiceFid; }
            set 
            {
                if (_paymentServiceFid != value)
                {
                    _paymentServiceFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Card number encrypted using your public key</summary>
        [Newtonsoft.Json.JsonProperty("encryptedCardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncryptedCardNumber
        {
            get { return _encryptedCardNumber; }
            set 
            {
                if (_encryptedCardNumber != value)
                {
                    _encryptedCardNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Start Month of the card</summary>
        [Newtonsoft.Json.JsonProperty("startMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartMonth
        {
            get { return _startMonth; }
            set 
            {
                if (_startMonth != value)
                {
                    _startMonth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Start Year of the card</summary>
        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartYear
        {
            get { return _startYear; }
            set 
            {
                if (_startYear != value)
                {
                    _startYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiration Month of the card</summary>
        [Newtonsoft.Json.JsonProperty("expiryMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpiryMonth
        {
            get { return _expiryMonth; }
            set 
            {
                if (_expiryMonth != value)
                {
                    _expiryMonth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiration Year of the card</summary>
        [Newtonsoft.Json.JsonProperty("expiryYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpiryYear
        {
            get { return _expiryYear; }
            set 
            {
                if (_expiryYear != value)
                {
                    _expiryYear = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Issue number of the card</summary>
        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Issue
        {
            get { return _issue; }
            set 
            {
                if (_issue != value)
                {
                    _issue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Last 4 digits of the credit card number</summary>
        [Newtonsoft.Json.JsonProperty("last4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last4
        {
            get { return _last4; }
            set 
            {
                if (_last4 != value)
                {
                    _last4 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Card issuer (visa, mastercard, etc)</summary>
        [Newtonsoft.Json.JsonProperty("cardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardType
        {
            get { return _cardType; }
            set 
            {
                if (_cardType != value)
                {
                    _cardType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name as appears on card</summary>
        [Newtonsoft.Json.JsonProperty("cardHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardHolder
        {
            get { return _cardHolder; }
            set 
            {
                if (_cardHolder != value)
                {
                    _cardHolder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>FID of an existing address to use with the card</summary>
        [Newtonsoft.Json.JsonProperty("addressFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressFid
        {
            get { return _addressFid; }
            set 
            {
                if (_addressFid != value)
                {
                    _addressFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Address Line 1 of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1
        {
            get { return _addressLine1; }
            set 
            {
                if (_addressLine1 != value)
                {
                    _addressLine1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Address Line 2 of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Address Line 3 of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3
        {
            get { return _addressLine3; }
            set 
            {
                if (_addressLine3 != value)
                {
                    _addressLine3 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>City for the card</summary>
        [Newtonsoft.Json.JsonProperty("addressCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressCity
        {
            get { return _addressCity; }
            set 
            {
                if (_addressCity != value)
                {
                    _addressCity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>State/County of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressState
        {
            get { return _addressState; }
            set 
            {
                if (_addressState != value)
                {
                    _addressState = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Country of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressCountry
        {
            get { return _addressCountry; }
            set 
            {
                if (_addressCountry != value)
                {
                    _addressCountry = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Postal/Zip Code of the card</summary>
        [Newtonsoft.Json.JsonProperty("addressPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressPostal
        {
            get { return _addressPostal; }
            set 
            {
                if (_addressPostal != value)
                {
                    _addressPostal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfirmOrderWithNewCardPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmOrderWithNewCardPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConfirmPayPalOrderPayload : ConfirmOrderPayload, System.ComponentModel.INotifyPropertyChanged
    {
        private string _token;
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token
        {
            get { return _token; }
            set 
            {
                if (_token != value)
                {
                    _token = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfirmPayPalOrderPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmPayPalOrderPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VerifyOrderPayload : ConfirmOrderPayload, System.ComponentModel.INotifyPropertyChanged
    {
        private string _successUrl;
        private string _cancelUrl;
        private string _failUrl;
    
        [Newtonsoft.Json.JsonProperty("successUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SuccessUrl
        {
            get { return _successUrl; }
            set 
            {
                if (_successUrl != value)
                {
                    _successUrl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancelUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancelUrl
        {
            get { return _cancelUrl; }
            set 
            {
                if (_cancelUrl != value)
                {
                    _cancelUrl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("failUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FailUrl
        {
            get { return _failUrl; }
            set 
            {
                if (_failUrl != value)
                {
                    _failUrl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VerifyOrderPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VerifyOrderPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateTicketPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _customerEmail;
        private string _customerName;
        private string _customerFid;
        private string _ticketType;
        private string _brandFid;
        private string _queueFid;
        private string _departmentFid;
        private string _departmentEmail;
        private string _departmentName;
        private string _subject;
        private string _textBody;
        private string _htmlBody;
    
        [Newtonsoft.Json.JsonProperty("customerEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerEmail
        {
            get { return _customerEmail; }
            set 
            {
                if (_customerEmail != value)
                {
                    _customerEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName
        {
            get { return _customerName; }
            set 
            {
                if (_customerName != value)
                {
                    _customerName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("customerFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerFid
        {
            get { return _customerFid; }
            set 
            {
                if (_customerFid != value)
                {
                    _customerFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ticketType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TicketType
        {
            get { return _ticketType; }
            set 
            {
                if (_ticketType != value)
                {
                    _ticketType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("brandFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandFid
        {
            get { return _brandFid; }
            set 
            {
                if (_brandFid != value)
                {
                    _brandFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("queueFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueFid
        {
            get { return _queueFid; }
            set 
            {
                if (_queueFid != value)
                {
                    _queueFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("departmentFid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepartmentFid
        {
            get { return _departmentFid; }
            set 
            {
                if (_departmentFid != value)
                {
                    _departmentFid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("departmentEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepartmentEmail
        {
            get { return _departmentEmail; }
            set 
            {
                if (_departmentEmail != value)
                {
                    _departmentEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("departmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepartmentName
        {
            get { return _departmentName; }
            set 
            {
                if (_departmentName != value)
                {
                    _departmentName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject
        {
            get { return _subject; }
            set 
            {
                if (_subject != value)
                {
                    _subject = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("textBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TextBody
        {
            get { return _textBody; }
            set 
            {
                if (_textBody != value)
                {
                    _textBody = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("htmlBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtmlBody
        {
            get { return _htmlBody; }
            set 
            {
                if (_htmlBody != value)
                {
                    _htmlBody = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateTicketPayload FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateTicketPayload>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Credit amount type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CreditAmountType
    {
        [System.Runtime.Serialization.EnumMember(Value = "percent_of_remaining")]
        Percent_of_remaining = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "percent_of_total")]
        Percent_of_total = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "fixed")]
        Fixed = 2,
    
    }
    
    /// <summary>Mode to modify subscription with</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModifySubscriptionMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "prorate")]
        Prorate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "extend")]
        Extend = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "replace")]
        Replace = 2,
    
    }
    
    /// <summary>Payment account type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PaymentAccountType
    {
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "visa")]
        Visa = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "mastercard")]
        Mastercard = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "amex")]
        Amex = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "jcb")]
        Jcb = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "discover")]
        Discover = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "diners")]
        Diners = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "encrypted")]
        Encrypted = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "paypal_personal")]
        Paypal_personal = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "paypal_premier")]
        Paypal_premier = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "paypal_business")]
        Paypal_business = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "paypal_verified")]
        Paypal_verified = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "paypal_unverified")]
        Paypal_unverified = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "paypal")]
        Paypal = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "bitcoin")]
        Bitcoin = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "account_balance")]
        Account_balance = 15,
    
    }
    
    /// <summary>Payment Method</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PaymentMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = "creditcard")]
        Creditcard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "debitcard")]
        Debitcard = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "cheque")]
        Cheque = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "cash")]
        Cash = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "prepaidcard")]
        Prepaidcard = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "directdebit")]
        Directdebit = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "bacs")]
        Bacs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "standingorder")]
        Standingorder = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "chaps")]
        Chaps = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "onlineservice")]
        Onlineservice = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "telephone")]
        Telephone = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "creditnote")]
        Creditnote = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "virtualcard")]
        Virtualcard = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "giftcard")]
        Giftcard = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "multiple")]
        Multiple = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "paypal")]
        Paypal = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "bitcoin")]
        Bitcoin = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "account_balance")]
        Account_balance = 18,
    
    }
    
    /// <summary>Payment Mode</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PaymentMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "automatic")]
        Automatic = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "request")]
        Request = 1,
    
    }
    
    /// <summary>The reason for reversing the action</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ReversalReason
    {
        [System.Runtime.Serialization.EnumMember(Value = "chargeback")]
        Chargeback = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "cancel")]
        Cancel = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "fraud")]
        Fraud = 2,
    
    }
    
    /// <summary>Advertiser Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdvertiserType
    {
        [System.Runtime.Serialization.EnumMember(Value = "affiliate")]
        Affiliate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "network")]
        Network = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "customer")]
        Customer = 2,
    
    }
    
    /// <summary>Account Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CustomerAccountType
    {
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "business")]
        Business = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "residential")]
        Residential = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "student")]
        Student = 3,
    
    }
    
    /// <summary>Account Status</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CustomerAccountStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "setup")]
        Setup = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "suspended")]
        Suspended = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "expired")]
        Expired = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "cancelled")]
        Cancelled = 4,
    
    }
    
    /// <summary>Term Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CycleTermType
    {
        [System.Runtime.Serialization.EnumMember(Value = "onetime")]
        Onetime = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "lifetime")]
        Lifetime = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "day")]
        Day = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "week")]
        Week = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "month")]
        Month = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "year")]
        Year = 5,
    
    }
    
    /// <summary>Discount Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DiscountType
    {
        [System.Runtime.Serialization.EnumMember(Value = "fixed")]
        Fixed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "percentage")]
        Percentage = 1,
    
    }
    
    /// <summary>Customer Lifecycle Stage</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CustomerLifecycle
    {
        [System.Runtime.Serialization.EnumMember(Value = "prospect")]
        Prospect = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "customer")]
        Customer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 2,
    
    }
    
    /// <summary>Customer Subscription Status</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CustomerSubscriptionType
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "trial")]
        Trial = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "free")]
        Free = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "paid")]
        Paid = 3,
    
    }
    
    /// <summary>Payment Service Processor Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PaymentServiceProcessor
    {
        [System.Runtime.Serialization.EnumMember(Value = "paypal")]
        Paypal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "wire")]
        Wire = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "blackhole")]
        Blackhole = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "cheque")]
        Cheque = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "prepayment")]
        Prepayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "fortifipay")]
        Fortifipay = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "coinbase")]
        Coinbase = 6,
    
    }
    
    /// <summary>Order Type (Must be initial to Auth Cards)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CreateOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "initial")]
        Initial = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "purchase")]
        Purchase = 1,
    
    }
    
    /// <summary>Subscription Refund Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SubscriptionRefundType
    {
        [System.Runtime.Serialization.EnumMember(Value = "prorate")]
        Prorate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "full")]
        Full = 1,
    
    }
    
    /// <summary>Reason Group Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ReasonGroupType
    {
        [System.Runtime.Serialization.EnumMember(Value = "cancel")]
        Cancel = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "suspend")]
        Suspend = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "refund")]
        Refund = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "credit")]
        Credit = 3,
    
    }
    
    /// <summary>Colour of the new ticket</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Colour
    {
        [System.Runtime.Serialization.EnumMember(Value = "blue")]
        Blue = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "red")]
        Red = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "orange")]
        Orange = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "yellow")]
        Yellow = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "indigo")]
        Indigo = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "violet")]
        Violet = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "green")]
        Green = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "pink")]
        Pink = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "grey")]
        Grey = 8,
    
    }
    
    /// <summary>Current State</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum State
    {
        [System.Runtime.Serialization.EnumMember(Value = "alert")]
        Alert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "initiated")]
        Initiated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "disputed")]
        Disputed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "won")]
        Won = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "lost")]
        Lost = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "undisputed_loss")]
        Undisputed_loss = 5,
    
    }
    
    /// <summary>Source of the alert, or gateway for everything else</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Source
    {
        [System.Runtime.Serialization.EnumMember(Value = "gateway")]
        Gateway = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ethoca")]
        Ethoca = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "verifi")]
        Verifi = 2,
    
    }
    
    /// <summary>Status of customer email opt-in</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OptInStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "no")]
        No = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "clicked")]
        Clicked = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "confirmed")]
        Confirmed = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private string _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response2 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private AuthToken _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthToken Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response3 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private User _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response3>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response4 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Organisation _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Organisation Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response4>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response5 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Brands _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Brands Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response5>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response6 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Fid _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fid Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response6>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response7 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Advertisers _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Advertisers Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response7>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response8 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Advertiser _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Advertiser Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response8>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response9 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Fid _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fid Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response9>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response10 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private AdvertiserCampaign _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdvertiserCampaign Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response10>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response11 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<AdvertiserPixel> _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AdvertiserPixel> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response11>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response12 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private VisitorPostAction _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VisitorPostAction Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response12>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response13 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private VisitorReversalAction _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VisitorReversalAction Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response13>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response14 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private PubKey _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PubKey Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response14>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response15 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private CoinbaseCheckout _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoinbaseCheckout Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response15>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response16 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Customer _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customer Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response16>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response17 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Customer _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customer Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response17 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response17>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response18 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Customer _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customer Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response18 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response18>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response19 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private ChatSessions _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChatSessions Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response19 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response19>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response20 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Payment _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payment Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response20 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response20>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response21 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Fid _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fid Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response21 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response21>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response22 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private BoolMessage _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BoolMessage Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response22 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response22>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response23 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Tickets _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tickets Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response23 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response23>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response24 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private ConfigItems _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigItems Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response24 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response24>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response25 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private ConfigItem _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigItem Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response25 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response25>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response26 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private PropertyValue _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PropertyValue Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response26 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response26>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response27 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private PaymentAccounts _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentAccounts Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response27 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response27>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response28 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private PaypalInit _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaypalInit Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response28 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response28>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response29 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private InvoiceCreditNote _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceCreditNote Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response29 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response29>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response30 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Subscriptions _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subscriptions Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response30 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response30>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response31 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Subscription _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subscription Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response31 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response31>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response32 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Fid _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fid Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response32>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response33 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private CalculatedSubscriptionModification _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculatedSubscriptionModification Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response33 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response33>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response34 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private CalculateSubscriptionRefund _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculateSubscriptionRefund Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response34 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response34>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response35 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Order _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Order Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response35 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response35>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response36 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Fid _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fid Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response36 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response36>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response37 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Fid _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fid Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response37 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response37>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response38 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Subscription _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subscription Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response38 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response38>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response39 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private BoolMessage _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BoolMessage Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response39 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response39>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response40 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private BoolMessage _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BoolMessage Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response40 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response40>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response41 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Products _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Products Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response41 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response41>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response42 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private ProductPrices _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductPrices Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response42 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response42>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response43 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private ProductGroups _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductGroups Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response43 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response43>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response44 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Products _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Products Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response44 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response44>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response45 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Fid _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fid Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response45 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response45>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response46 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Order _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Order Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response46 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response46>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response47 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private OrderVerification _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderVerification Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response47 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response47>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response48 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private BoolMessage _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BoolMessage Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response48 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response48>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response49 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private OrderConfirmation _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderConfirmation Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response49 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response49>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response50 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private OrderConfirmation _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderConfirmation Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response50 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response50>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response51 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private OrderConfirmation _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderConfirmation Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response51 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response51>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response52 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private OrderConfirmation _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderConfirmation Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response52 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response52>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response53 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private FraudScan _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FraudScan Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response53 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response53>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response54 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private OrderProducts _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderProducts Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response54 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response54>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response55 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private OrderAddProducts _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderAddProducts Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response55 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response55>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response56 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private OrderAddProducts _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderAddProducts Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response56 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response56>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response57 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Fid _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fid Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response57 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response57>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response58 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Entity _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entity Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response58 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response58>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response59 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private ProductOffers _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductOffers Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response59 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response59>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response60 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Licence _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Licence Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response60 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response60>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response61 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private ReasonGroups _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReasonGroups Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response61 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response61>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response62 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Reasons _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reasons Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response62 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response62>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response63 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Ticket _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ticket Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response63 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response63>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response64 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private Services _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Services Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response64 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response64>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response65 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private ServiceIncidents _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceIncidents Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response65 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response65>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response66 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private IncidentUpdates _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IncidentUpdates Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response66 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response66>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response67 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private PaymentGateways _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentGateways Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response67 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response67>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response68 : Envelope, System.ComponentModel.INotifyPropertyChanged
    {
        private IntegrationUser _data;
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationUser Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response68 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response68>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PaymentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "affiliate")]
        Affiliate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "invoice")]
        Invoice = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "order")]
        Order = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "preauth")]
        Preauth = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PaymentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "pending")]
        Pending = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "paid")]
        Paid = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "refund-pending")]
        RefundPending = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "refunded")]
        Refunded = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "partially-refunded")]
        PartiallyRefunded = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "chargeback")]
        Chargeback = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "chargeback-pending")]
        ChargebackPending = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdvertiserPixelMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = "iframe")]
        Iframe = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "img")]
        Img = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "js")]
        Js = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "curl")]
        Curl = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "html")]
        Html = 4,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}